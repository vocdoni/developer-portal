"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[2645],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(t),m=l,k=c["".concat(o,".").concat(m)]||c[m]||d[m]||r;return t?a.createElement(k,s(s({ref:n},p),{},{components:t})):a.createElement(k,s({ref:n},p))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,s=new Array(r);s[0]=c;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,s[1]=i;for(var u=2;u<r;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8727:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=t(87462),l=(t(67294),t(3905));const r={},s="Blind-CSP API",i={unversionedId:"protocol/census/off-chain-csp/api",id:"protocol/census/off-chain-csp/api",title:"Blind-CSP API",description:"The Blind CSP API is a minimalistic HTTP(s) API that implements methods for authenticating users with the CSP.",source:"@site/docs/protocol/census/off-chain-csp/api.md",sourceDirName:"protocol/census/off-chain-csp",slug:"/protocol/census/off-chain-csp/api",permalink:"/protocol/census/off-chain-csp/api",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Off-Chain CSP Census",permalink:"/protocol/census/off-chain-csp/"},next:{title:"Off-Chain Tree Census",permalink:"/protocol/census/off-chain-tree"}},o={},u=[{value:"Auth Endpoint",id:"auth-endpoint",level:2},{value:"Election Info",id:"election-info",level:3},{value:"Authentication Steps",id:"authentication-steps",level:3},{value:"Step 0",id:"step-0",level:4},{value:"Step 1",id:"step-1",level:4},{value:"Blind signature",id:"blind-signature",level:3},{value:"Shared Key",id:"shared-key",level:3},{value:"Indexer",id:"indexer",level:3},{value:"Admin",id:"admin",level:2},{value:"SMS Handler Admin",id:"sms-handler-admin",level:2},{value:"Database Dump",id:"database-dump",level:3},{value:"List Users",id:"list-users",level:3},{value:"Get User Data",id:"get-user-data",level:3},{value:"Add SMS attempt",id:"add-sms-attempt",level:3},{value:"Set Consumed",id:"set-consumed",level:3},{value:"Clone User",id:"clone-user",level:3},{value:"Add a New User",id:"add-a-new-user",level:3},{value:"Add / Delete Elections",id:"add--delete-elections",level:3},{value:"Search the ExtraData Field",id:"search-the-extradata-field",level:3},{value:"Delete a User",id:"delete-a-user",level:3},{value:"Import",id:"import",level:3},{value:"Set User Data",id:"set-user-data",level:3}],p={toc:u};function d(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"blind-csp-api"},"Blind-CSP API"),(0,l.kt)("p",null,"The Blind CSP API is a minimalistic HTTP(s) API that implements methods for authenticating users with the CSP."),(0,l.kt)("h2",{id:"auth-endpoint"},"Auth Endpoint"),(0,l.kt)("p",null,"The auth endpoint is the public endpoint that can be used by any client to get information and register users."),(0,l.kt)("p",null,"We'll show the usage of this endpoint with a simple example. This example CSP uses the Simple Math handler which authenticates users by asking them to solve a simple arithmetic problem."),(0,l.kt)("p",null,"The handler requires a two steps authentication process:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Requires a name and replies with the challenge (",'["123","200"]',")"),(0,l.kt)("li",{parentName:"ol"},"Requires the challenge solution, the sum of the challenge elements (",'["323"]',")")),(0,l.kt)("h3",{id:"election-info"},"Election Info"),(0,l.kt)("p",null,"Request:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"info")," endpoint provides the description of the authentication handler. ")),(0,l.kt)("p",null,"Response:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"authType")," parameter indicates the kind of authentication required by the CSP."),(0,l.kt)("li",{parentName:"ul"},"Currently only ",(0,l.kt)("inlineCode",{parentName:"li"},"auth")," as authType is supported, but ",(0,l.kt)("inlineCode",{parentName:"li"},"oauth")," or others might be added in the future."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"signatureType")," is a string array containing the list of supported signature types (used as the CSP proof).",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Currently the supported signature types are ",(0,l.kt)("inlineCode",{parentName:"li"},"blind")," for ECDSA blind signature, ",(0,l.kt)("inlineCode",{parentName:"li"},"ecdsa")," for plain ECDSA signature over an arbitrary payload, and ",(0,l.kt)("inlineCode",{parentName:"li"},"sharedkey")," for fetching a shared secret (signature of electionId)."))),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"authSteps")," object array describes the authentication steps and its parameters for a given authentication handler.")),(0,l.kt)("p",null,"In the following example there are two steps (size of the object array), the first one requires a\ntext field named ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),". The second a 4 digits integer named ",(0,l.kt)("inlineCode",{parentName:"p"},"solution"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'curl http://127.0.0.1:5000/v1/auth/elections/info\n\n{\n  "title": "Simple math challenge",\n  "authType": "auth",\n  "signatureType": ["blind","ecdsa","sharedkey"],\n  "authSteps": [\n    {\n      "title": "name",\n      "type": "text"\n    },\n    {\n      "title": "solution",\n      "type": "int4"\n    }\n  ]\n}\n')),(0,l.kt)("h3",{id:"authentication-steps"},"Authentication Steps"),(0,l.kt)("p",null,"The endpoint ",(0,l.kt)("inlineCode",{parentName:"p"},"blind/auth/<step>"),", where step is a 32 byte integer, handles the authentication steps for the handler.\nThe client needs to perform all steps (in our case 2) starting from 0, successfully and serially."),(0,l.kt)("h4",{id:"step-0"},"Step 0"),(0,l.kt)("p",null,"An ",(0,l.kt)("inlineCode",{parentName:"p"},"authToken")," is provided by the CSP in order to identify the client\nin the following steps."),(0,l.kt)("p",null,"An array of strings named ",(0,l.kt)("inlineCode",{parentName:"p"},"response")," might be returned by the handler if the client\nrequires some data for performing the next step. In our case the response includes our 'challenge', a set of numbers to be summed."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl -s 127.0.0.1:5000/v1/auth/elections/A9893a41fc7046d66d39fdc073ed901af6bec66ecc070a97f9cb2dda02b11265/blind/auth/0 -X POST -d \'{"authData":["John Smith"]}\'\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n      "authToken": "9ba29669-3a38-43ac-a8f6-d6ac99d2e3a2",\n      "response": [\n        "141",\n        "484"\n      ]\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "Error invalid name"\n}\n')),(0,l.kt)("h4",{id:"step-1"},"Step 1"),(0,l.kt)("p",null,"There can be an unlimited number of authentication steps, but for our example there are only two (0 and 1). "),(0,l.kt)("p",null,"In the final step, if the authentication challenge is resolved, the CSP returns ",(0,l.kt)("inlineCode",{parentName:"p"},"token"),", the data that can be used by the client to prepare and ask for the signature. In our case the signature is of type ",(0,l.kt)("inlineCode",{parentName:"p"},"blind")," so the token is the curve point ",(0,l.kt)("inlineCode",{parentName:"p"},"R")," required for blinding the payload."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# for the authData the string 574 is passed as it is the sum of 141 and 484 as integers\ncurl -s 127.0.0.1:5000/v1/auth/elections/A9893a41fc7046d66d39fdc073ed901af6bec66ecc070a97f9cb2dda02b11265/ecdsa/auth/1 -X POST -d \'{"authToken":"8b16df36-9720-487f-b3eb-a46dfdebdb36", "authData":["574"]}\'\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n      "token": "0d2347cf59313bdb4038f0c6643e9289d694c1c67d4d1d66f56968e374d48669"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "Message goes here"\n}\n')),(0,l.kt)("h3",{id:"blind-signature"},"Blind signature"),(0,l.kt)("p",null,"The blind signature is the signature performed by the CSP that proves a voter's eligibility. The payload to sign is usually an ephemeral ECDSA public key that the client creates for performing the vote for a specific voting process, but can also be any kind of privacy preserving digital ID."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST https://server.foo/v1/auth/processes/12345.../blind/sign -d \'{ "payload": "0xabcdef...", "token": "0x123bcde..." }\'\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "signature": "0x1234567890abcde..." // the blind signature\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "Invalid token"\n}\n')),(0,l.kt)("h3",{id:"shared-key"},"Shared Key"),(0,l.kt)("p",null,"The shared key endpoint provides a ",(0,l.kt)("inlineCode",{parentName:"p"},"sharedKey"),", an optional key that provides users access to any encrypted data that accompanies a voting process. This is used when a private election that only provides access to voters is required."),(0,l.kt)("p",null,"The shared key is a ECDSA salted signature of a keccak256 hash of a given electionId and is identical for all voters belonging to an election."),(0,l.kt)("p",null,"The sharedkey endpoint requires the same authentication steps described by the ",(0,l.kt)("inlineCode",{parentName:"p"},"info")," method.\nHowever, the handler might apply different restrictions, such as allowing shared key authentication to succeed more than once for a single user."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl -s 127.0.0.1:5000/v1/auth/elections/A9893a41fc7046d66d39fdc073ed901af6bec66ecc070a97f9cb2dda02b11265/sharedkey/0 -X POST -d \'{"authData":["John Smith"]}\'\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{     \n      "authToken":"12ab5ec4-bfc5-4dd1-896f-46ae06b15e81",\n      "response":["232","333"]\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "Message goes here"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl -s 127.0.0.1:5000/v1/auth/elections/A9893a41fc7046d66d39fdc073ed901af6bec66ecc070a97f9cb2dda02b11265/sharedkey/1 -X POST -d \'{"authToken":"12ab5ec4-bfc5-4dd1-896f-46ae06b15e81", "authData":["565"]}\'\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n      "sharedkey": "a6d7b59f5f6dfff418464c3fa2895ad872d402bda6e85f1ba62fe6f50f703ea87247ca8bf34a00a15cd768ba44cd6c99044a2ff4b6f837f77c243102872f03c101"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "error": "invalid authData"\n}\n')),(0,l.kt)("h3",{id:"indexer"},"Indexer"),(0,l.kt)("p",null,"Some handlers might enable an indexer in order to provide each user with a list of elections they are eligible to vote in. The indexer endpoint takes some form of unique identifier as a URL parameter (hexadecimal string format) and returns the list of election identifiers (if any)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5000/v1/auth/elections/indexer/a216bc43310f46d66d39fdc073ed901af6bec66ecc070a97f9cb2dda01ba0241\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Ok")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "elections": [\n    {\n      "electionId": "2222222222222222222222222222222222222222222222222222222222222222",\n      "remainingAttempts": 5,\n      "consumed": false,\n      "extra": [\n        "41"\n      ]\n    },\n    {\n      "electionId": "1111111111111111111111111111111111111111111111111111111111111111",\n      "remainingAttempts": 5,\n      "consumed": false,\n      "extra": [\n        "41"\n      ]\n    }\n  ]\n}\n\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "error": "user not found"\n}\n')),(0,l.kt)("h2",{id:"admin"},"Admin"),(0,l.kt)("p",null,"The blind-csp service provides administration endpoints as well. All the admin operations and results require authenticated admin user access to the service."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[GET]"," ",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections")," : Returns all elections")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[GET]"," ",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections/:electionId")," : Returns the provided electionId information")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[POST]","\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections")," : Creates a new Census and attaches it to a new Election from the defined data. Returns the election and the admin token for that election.\nRequest JSON body example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{ \n    "id": "0x.....",\n    "handlers": \n    [\n        {\n            "handler": "oauth",\n            "service": "facebook",\n            "mode": "usernames",\n            "data": ["12345","nigeon@gmail.com"]\n        },\n        {\n            "handler": "oauth",\n            "service": "github",\n            "mode": "usernames",\n            "data": ["nigeon"]\n        },\n        {\n            "handler": "sms",\n            "data": ["`666666666`", "637840295"]\n        }\n    ]\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[DELETE]"," ",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections/:electionId")," : Deletes election ID")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[GET]"," ",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections/:electionId/users")," : List users in election")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[POST]"," ",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections/:electionId/users")," : Add user in election\nRequest JSON body example:"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "userId": "<user-id>",\n    "handler": "oauth",\n    "service": "facebook",\n    "mode": "usernames",\n    "data": "nigeon@gmail.com",\n    "consumed": false\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[GET]"," ",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections/[electionId]/users/[user]")," : Get user")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[PUT]"," ",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections/[electionId]users/[user]")," : Edits user\nRequest JSON body example:"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "consumed": true\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[DELETE]"," ",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections/:electionId/users/[user]")," : Deletes user")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"[GET]"," ",(0,l.kt)("inlineCode",{parentName:"p"},"/admin/elections/:electionId/users")," : List of users in the elections"))),(0,l.kt)("h2",{id:"sms-handler-admin"},"SMS Handler Admin"),(0,l.kt)("p",null,"In the case that you are using a CSP with an SMS handler (users authenticated via an SMS text), there is an admin endpoint specifically for configuring this handler."),(0,l.kt)("p",null,"The SMS handler is backed by a database of user ids and phone numbers, as well as the set of elections each user is able to vote in."),(0,l.kt)("p",null,"The API requires a bearer authentication token, if not provided by the user the token is autogenerated.\nThe following examples with ",(0,l.kt)("inlineCode",{parentName:"p"},"curl")," include an implicit header flag such as:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'curl -H "Authorization: Bearer 63d97da8-86e7-4313-92e7-2d8ae99e6c6e" <query>')),(0,l.kt)("h3",{id:"database-dump"},"Database Dump"),(0,l.kt)("p",null,"Return all users and elections (JSON).\nNote that this method can be quite heavy and reach HTTP body size limit if the database is too big.\nOnly suitable for debug purposes."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/dump\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "userID": "6d2347cf59313bdb4038f0c6643e9289d694c1c67d4d1d66f56968e374d48669",\n "elections": [\n  {\n   "electionId": "1111111111111111111111111111111111111111111111111111111111111111",\n   "remainingAttempts": 5,\n   "consumed": false\n  },\n  {\n   "electionId": "2222222222222222222222222222222222222222222222222222222222222222",\n   "remainingAttempts": 5,\n   "consumed": false\n  },\n  {\n   "electionId": "3333333333333333333333333333333333333333333333333333333333333333",\n   "remainingAttempts": 5,\n   "consumed": false\n  }\n ],\n "extraData": "Vocdoni",\n "phone": {\n  "country_code": 34,\n  "national_number": 651200042\n }\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "auth token not valid"\n}\n')),(0,l.kt)("h3",{id:"list-users"},"List Users"),(0,l.kt)("p",null,"List all users identifiers (userID) registered to the SMS handler."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/users \n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "users": [\n  "6c0b6e1020b6354c714fc65aa198eb95e663f038e32026671c58677e0e0f8eac",\n  "bf5b6a9c69a5abee870b3667e92c589ef9c13458be0fc0493b2ba5a9658c690b",\n  "87b1161ad7a5290dd1d2b4b8ded948950d7420551648000887fb2529be58a39e"\n ]\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "auth token not valid"\n}\n')),(0,l.kt)("h3",{id:"get-user-data"},"Get User Data"),(0,l.kt)("p",null,"Retrieve the user data given a userID."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/user/6c0b6e1020b6354c714fc65aa198eb95e663f038e32026671c58677e0e0f8eac\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "userID": "6c0b6e1020b6354c714fc65aa198eb95e663f038e32026671c58677e0e0f8eac",\n "elections": [\n  {\n   "electionId": "1111111111111111111111111111111111111111111111111111111111111111",\n   "remainingAttempts": 5,\n   "consumed": false\n  },\n  {\n   "electionId": "2222222222222222222222222222222222222222222222222222222222222222",\n   "remainingAttempts": 3,\n   "consumed": false\n  },\n  {\n   "electionId": "3333333333333333333333333333333333333333333333333333333333333333",\n   "remainingAttempts": 5,\n   "consumed": true\n  }\n ],\n "extraData": "John 16/05/1984",\n "phone": {\n  "country_code": 34,\n  "national_number": 66778899\n }\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "user is unknown"\n}\n')),(0,l.kt)("h3",{id:"add-sms-attempt"},"Add SMS attempt"),(0,l.kt)("p",null,"Increase by 1 the number of remaning SMS authentication attempts for a given userID and a given electionID."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# .../addAttempt/<userID>/<electionID>\ncurl http://127.0.0.1:5001/smsapi/addAttempt/6c0b6e1020b6354c714fc65aa198eb95e663f038e32026671c58677e0e0f8eac/2222222222222222222222222222222222222222222222222222222222222222\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ok":"true"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "user does not belong to election"\n}\n')),(0,l.kt)("h3",{id:"set-consumed"},"Set Consumed"),(0,l.kt)("p",null,"The consumed bool indicates if a user represented by userID has already fetched a CSP proof for a given electionId."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/setConsumed/6c0b6e1020b6354c714fc65aa198eb95e663f038e32026671c58677e0e0f8eac/2222222222222222222222222222222222222222222222222222222222222222/true\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ok": "true"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error":\n}\n')),(0,l.kt)("p",null,"After the two previous operations, the user looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/user/6c0b6e1020b6354c714fc65aa198eb95e663f038e32026671c58677e0e0f8eac\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "userID": "6c0b6e1020b6354c714fc65aa198eb95e663f038e32026671c58677e0e0f8eac",\n "elections": [\n  {\n   "electionId": "1111111111111111111111111111111111111111111111111111111111111111",\n   "remainingAttempts": 5,\n   "consumed": false\n  },\n  {\n   "electionId": "2222222222222222222222222222222222222222222222222222222222222222",\n   "remainingAttempts": 6,\n   "consumed": true\n  },\n  {\n   "electionId": "3333333333333333333333333333333333333333333333333333333333333333",\n   "remainingAttempts": 5,\n   "consumed": false\n  }\n ],\n "extraData": "John 16/05/1984",\n "phone": {\n  "country_code": 34,\n  "national_number": 66778899\n }\n}\n')),(0,l.kt)("h3",{id:"clone-user"},"Clone User"),(0,l.kt)("p",null,"Make a copy of a user with a new userID. The list of elections is preserved but not its internal status (consumed or remainingAttempts).\nThe first URL parameter is the source userID and the second the new userID."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/cloneUser/6c0b6e1020b6354c714fc65aa198eb95e663f038e32026671c58677e0e0f8eac/b3deea91021d8c3dd6b52b2b1ba5defbe4b0b2fe03bc4ad6944148effb3e1222\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ok": "true"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "user already exists"\n}\n')),(0,l.kt)("p",null,"The status of the user after the previous command is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/user/b3deea91021d8c3dd6b52b2b1ba5defbe4b0b2fe03bc4ad6944148effb3e1222\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "userID": "b3deea91021d8c3dd6b52b2b1ba5defbe4b0b2fe03bc4ad6944148effb3e1222",\n "elections": [\n  {\n   "electionId": "1111111111111111111111111111111111111111111111111111111111111111",\n   "remainingAttempts": 5,\n   "consumed": false\n  },\n  {\n   "electionId": "2222222222222222222222222222222222222222222222222222222222222222",\n   "remainingAttempts": 5,\n   "consumed": false\n  },\n  {\n   "electionId": "3333333333333333333333333333333333333333333333333333333333333333",\n   "remainingAttempts": 5,\n   "consumed": false\n  }\n ],\n "extraData": "John 16/05/1984",\n "phone": {\n  "country_code": 34,\n  "national_number": 66778899\n }\n}\n')),(0,l.kt)("h3",{id:"add-a-new-user"},"Add a New User"),(0,l.kt)("p",null,"Creates a new user with a ",(0,l.kt)("inlineCode",{parentName:"p"},"phone")," and an ",(0,l.kt)("inlineCode",{parentName:"p"},"extra")," field containing arbitrary data."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl http://127.0.0.1:5001/smsapi/newUser/ff29acb484cc721c102715295af1698ff90e90cb1b70f4d05aaa19674dbddce4 -d \'{"phone":"+34700605040","extra":"Alice 02/04/1991"}\' -X POST\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ok": "true"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "user already exists"\n}\n')),(0,l.kt)("p",null,"Then we can query the new user:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/user/ff29acb484cc721c102715295af1698ff90e90cb1b70f4d05aaa19674dbddce4`\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "userID": "ff29acb484cc721c102715295af1698ff90e90cb1b70f4d05aaa19674dbddce4",\n "extraData": "Alice 02/04/1991",\n "phone": {\n  "country_code": 34,\n  "national_number": 700605040\n }\n}\n')),(0,l.kt)("h3",{id:"add--delete-elections"},"Add / Delete Elections"),(0,l.kt)("p",null,"Adds a new election for a given user."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/addElection/ff29acb484cc721c102715295af1698ff90e90cb1b70f4d05aaa19674dbddce4/3333333333333333333333333333333333333333333333333333333333333333\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ok": "true"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "user is unknown"\n}\n')),(0,l.kt)("p",null,"Now the new user has the previous election configured:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/user/ff29acb484cc721c102715295af1698ff90e90cb1b70f4d05aaa19674dbddce4\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "userID": "ff29acb484cc721c102715295af1698ff90e90cb1b70f4d05aaa19674dbddce4",\n "elections": [\n  {\n   "electionId": "3333333333333333333333333333333333333333333333333333333333333333",\n   "remainingAttempts": 5,\n   "consumed": false\n  }\n ],\n "extraData": "Alice 02/04/1991",\n "phone": {\n  "country_code": 34,\n  "national_number": 700605040\n }\n}\n')),(0,l.kt)("p",null,"Delete an election for a user."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/delElection/ff29acb484cc721c102715295af1698ff90e90cb1b70f4d05aaa19674dbddce4/3333333333333333333333333333333333333333333333333333333333333333\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ok": "true"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "error goes here"\n}\n')),(0,l.kt)("h3",{id:"search-the-extradata-field"},"Search the ExtraData Field"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"extraData"),' field can store any arbitrary data regarding the user (full name, national ID, birth date, etc.).\nThe search endpoint returns the list of userID for a specific term contained inside the extraData field.\nThe search text function matches full words, such as "Alice" but not "Ali".'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl  http://127.0.0.1:5001/smsapi/search -d \'{"term":"Alice"}\' -X POST\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "users": ["ff29acb484cc721c102715295af1698ff90e90cb1b70f4d05aaa19674dbddce4"]\n}\n')),(0,l.kt)("h3",{id:"delete-a-user"},"Delete a User"),(0,l.kt)("p",null,"A user can be deleted by their userID."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/delUser/ff29acb484cc721c102715295af1698ff90e90cb1b70f4d05aaa19674dbddce4\n")),(0,l.kt)("p",null,"` Response OK"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ok": "true"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "user is unknown"\n}\n')),(0,l.kt)("h3",{id:"import"},"Import"),(0,l.kt)("p",null,"Import can be used to insert (or update) the database using the output from a dump."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/dump > dump.json\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://127.0.0.1:5001/smsapi/import -d @dump.json\n")),(0,l.kt)("p",null,"` Response OK"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ok": "true"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "error goes here"\n}\n')),(0,l.kt)("h3",{id:"set-user-data"},"Set User Data"),(0,l.kt)("p",null,"Modifies the existing user fields ",(0,l.kt)("inlineCode",{parentName:"p"},"phone")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"extra")," by using the following POST call."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Request")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl http://127.0.0.1:5001/smsapi/setUserData/6c0b6e1020b6354c714fc65aa198eb95e663f038e32026671c58677e0e0f8eac -d \'{"phone":"+34722847182", "extra":"John Smith"}\'\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response OK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ok": "true"\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Response Error")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "error": "error goes here"\n}\n')))}d.isMDXComponent=!0}}]);