"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[8277],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(n),k=i,h=u["".concat(s,".").concat(k)]||u[k]||c[k]||r;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},19574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={},l="Off-Chain Tree ZK Census Proof",o={unversionedId:"protocol/anonymity/zk-census-proof",id:"protocol/anonymity/zk-census-proof",title:"Off-Chain Tree ZK Census Proof",description:"This document is divided in two sections:",source:"@site/docs/protocol/anonymity/zk-census-proof.md",sourceDirName:"protocol/anonymity",slug:"/protocol/anonymity/zk-census-proof",permalink:"/protocol/anonymity/zk-census-proof",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"On-Chain Census Anonymity",permalink:"/protocol/anonymity/on-chain"},next:{title:"Ballot Protocol",permalink:"/protocol/ballot-protocol"}},s={},p=[{value:"Protocol design",id:"protocol-design",level:2},{value:"zkSNARKs for anonymous voters",id:"zksnarks-for-anonymous-voters",level:3},{value:"zkSNARK circuit",id:"zksnark-circuit",level:3},{value:"Proof generation",id:"proof-generation",level:4},{value:"Implementation spec",id:"implementation-spec",level:2},{value:"Flow",id:"flow",level:3},{value:"Steps description",id:"steps-description",level:4},{value:"Flow for csv voting",id:"flow-for-csv-voting",level:4},{value:"Merkle Tree",id:"merkle-tree",level:3},{value:"zkInputs generation",id:"zkinputs-generation",level:3},{value:"Circuit identification",id:"circuit-identification",level:3},{value:"Examples of flags combinations",id:"examples-of-flags-combinations",level:4},{value:"KeyKeepers reveal and commit keys",id:"keykeepers-reveal-and-commit-keys",level:4}],m={toc:p};function c(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"off-chain-tree-zk-census-proof"},"Off-Chain Tree ZK Census Proof"),(0,i.kt)("p",null,"This document is divided in two sections:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"#protocol-design"},"Protocol design")),": high level overview of the protocol."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"#implementation-spec"},"Implementation spec")),": detailed specification, featuring the relevant data structures, hash functions, etc.")),(0,i.kt)("h2",{id:"protocol-design"},"Protocol design"),(0,i.kt)("p",null,"The census proof (also called franchise proof) enables user privacy and allows for fully anonymous voting."),(0,i.kt)("p",null,"The starting point is a ",(0,i.kt)("a",{parentName:"p",href:"/protocol/census/off-chain-tree"},"Merkle Proof"),", which efficiently proves that a voter's ",(0,i.kt)("em",{parentName:"p"},"zkCensusKey")," belongs to a Merkle Tree (census). However, using this proof alone would allow the organizer of a process to correlate each vote envelope with its voter's the ",(0,i.kt)("em",{parentName:"p"},"zkCensusKey")," on the database, so votes wouldn't be secret."),(0,i.kt)("p",null,"To this end, Vocdoni achieves voting anonymity by the use of ZK-Snarks."),(0,i.kt)("h3",{id:"zksnarks-for-anonymous-voters"},"zkSNARKs for anonymous voters"),(0,i.kt)("p",null,"Snark stands for ",(0,i.kt)("em",{parentName:"p"},"Succinct non-interactive argument of knowledge"),". In our case, this means proving to someone that we know something, but without revealing the contents of what we know."),(0,i.kt)("p",null,"In our case:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Voter")," is the owner of the ",(0,i.kt)("inlineCode",{parentName:"li"},"secret key")," corresponding to a certain ",(0,i.kt)("inlineCode",{parentName:"li"},"zkCensusKey")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Voter"),"'s ",(0,i.kt)("inlineCode",{parentName:"li"},"zkCensusKey")," is included in the ",(0,i.kt)("inlineCode",{parentName:"li"},"census")," Merkle Tree"),(0,i.kt)("li",{parentName:"ol"},"The nullifier provided by ",(0,i.kt)("inlineCode",{parentName:"li"},"Voter")," uniquely corresponds to their ",(0,i.kt)("inlineCode",{parentName:"li"},"secret key")," and the ",(0,i.kt)("inlineCode",{parentName:"li"},"process ID")," for a specific voting process")),(0,i.kt)("p",null,"Although the computation is CPU and memory intensive, ZK Proofs can be generated from the user client running on modest hardware. The proof is validated by the Vochain Nodes, Miners, and any Third Party monitoring the process."),(0,i.kt)("h3",{id:"zksnark-circuit"},"zkSNARK circuit"),(0,i.kt)("p",null,"Voters use the proving key generated for the circuit below to generate a ZK Proof. The circuit receives both private and public inputs."),(0,i.kt)("p",null,"Data that could reveal the identity of the voter are kept private (gray boxes in the diagram). Public inputs are submitted within the Vote Envelope, so that validators can check them against the proof and make sure that the user hasn't voted twice."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The same circuit can be used for any ",(0,i.kt)("inlineCode",{parentName:"li"},"process")," with a census size of the same range (10k, 100k, 1M, etc)."),(0,i.kt)("li",{parentName:"ul"},"It relies on a ",(0,i.kt)("a",{parentName:"li",href:"https://medium.com/qed-it/diving-into-the-snarks-setup-phase-b7660242a0d7"},(0,i.kt)("strong",{parentName:"a"},"trusted setup ceremony")))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Circuit diagram",src:n(13942).Z,width:"863",height:"456"})),(0,i.kt)("p",null,"The circuit above verifies that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the prover is the owner of the secret key"),(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"zkCensusKey")," of the secret key is inside a Hash, which is inside the Merkle Tree with the CensusRoot (",(0,i.kt)("inlineCode",{parentName:"li"},"key=Poseidon(secretKey), value=0"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"H(secretKey, processID) == nullifier"))),(0,i.kt)("h4",{id:"proof-generation"},"Proof generation"),(0,i.kt)("p",null,"The franchise proof is generated by running the zkSNARK circuit."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Private inputs:")," Index, Secret Key, Census Merkle-proof"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Public inputs:")," Census Merkle-root, Nullifier, ProcessId, Vote"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Output:")," Franchise proof")),(0,i.kt)("p",null,"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Vote encryption"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"encrypted_vote = encrypt( selected_voting_options + random_nonce )")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Nullifier generation"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nullifier = hash( process_id + user_secret_key )")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Fetch merkle proof"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"From any source that has the census merkle tree such as a Vocdoni Gateway or directly from IPFS.")))),(0,i.kt)("h2",{id:"implementation-spec"},"Implementation spec"),(0,i.kt)("h3",{id:"flow"},"Flow"),(0,i.kt)("p",null,"  ",(0,i.kt)("em",{parentName:"p"},"The following flow describes the "),"csv census",(0,i.kt)("em",{parentName:"p"}," flow.")),(0,i.kt)("mermaid",{value:"%%{init: {'theme':'forest'}}%%\n\nsequenceDiagram\nopt Steps 1-2 depend on the kind of census being used (csv, off-chain tree, ...)\n  Organizer->>Vochain: 1. create new voting process (newProcessTx) & define the CensusOrigin\n  User->>User: 2. generate CensusRegisterProof\nend\n\nUser->>User: 3. generate zkCensusKey\nUser->>Vochain: 4. register zkCensusKey using CensusRegisterProof that matches the CensusOrigin\nVochain->>Vochain: 5. build voting census merkle tree (in state)\nVochain->>Vochain: 6. startBlock is reached, process starts\nVochain->>Vochain: 7. last merkle tree root becomes censusRoot\nVochain->>User: 8.get MerkleProof\n# note, next line goes from User->User instead of User->IPFS to avoid spending a full column just for 1 query to IPFS\nUser->>User: 9. get ProvingKey & WitnessCalc (from IPFS GW)\nUser->>User: 10. generate zkInputs\nUser->>User: 11. generate zkSNARK proof\nUser->>Vochain: 12. cast the vote with zkSNARK proof\nVochain->>Vochain: 13. verify zkSNARK proof, accept the vote"}),(0,i.kt)("h4",{id:"steps-description"},"Steps description"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[O]")," = Organizer"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[U]")," = User"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[V]")," = Vochain"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"[G]")," = Gateway"))),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Circom ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/zk-franchise-proof-circuit"},"circuit")," is compiled & ",(0,i.kt)("strong",{parentName:"li"},"Trusted Setup")," generated"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[O+V]")," Create new voting process (newProcessTx) & define the ",(0,i.kt)("strong",{parentName:"li"},"CensusOrigin"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("strong",{parentName:"li"},"CensusOrigin")," could be for example:\t",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Using ",(0,i.kt)("strong",{parentName:"li"},"csv file"),": Generate MerkleTree from a ",(0,i.kt)("inlineCode",{parentName:"li"},"csv")," data file, where the ",(0,i.kt)("strong",{parentName:"li"},"CensusOrigin")," determines the verification of the MerkleProof of that MerkleTree (check the ",(0,i.kt)("a",{parentName:"li",href:"#flow-for-csv-voting"},"csv voting section")," for more details)"),(0,i.kt)("li",{parentName:"ul"},"Using ",(0,i.kt)("strong",{parentName:"li"},"Off-Chain Merkle Tree"),": The MerkleTree is the census itself, with each leaf of the tree representing a voter whose public key has been registered to the census"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U]")," Generate CensusRegisterProof, more details:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#flow-for-csv-voting"},"flow for csv voting")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U]")," Generate ",(0,i.kt)("strong",{parentName:"li"},"zkCensusKey")," (used as leaf key)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"User's ",(0,i.kt)("em",{parentName:"li"},"zkCensusKey"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"zkCensusKey = Hash(userSecret)")),(0,i.kt)("li",{parentName:"ul"},"This is the key that will be added into the ",(0,i.kt)("em",{parentName:"li"},"CensusTree")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U+V]")," ",(0,i.kt)("strong",{parentName:"li"},"Register zkCensusKey")," using ",(0,i.kt)("strong",{parentName:"li"},"CensusRegisterProof")," (registerKeyTx)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Vochain checks that the ",(0,i.kt)("strong",{parentName:"li"},"CensusRegistryProof")," can be validated for the ",(0,i.kt)("strong",{parentName:"li"},"CensusOrigin"))),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[V]")," Build voting ",(0,i.kt)("strong",{parentName:"li"},"census merkle tree")," (in state)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Where each leaf contains the hash of each user's ",(0,i.kt)("inlineCode",{parentName:"li"},"secretKey")," (",(0,i.kt)("em",{parentName:"li"},"zkCensusKey"),")"),(0,i.kt)("li",{parentName:"ul"},"MerkleTree type: circom compatible",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Hash function: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/iden3/go-iden3-crypto/blob/master/poseidon/poseidon.go"},"Poseidon")),(0,i.kt)("li",{parentName:"ul"},"Tree ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/vocdoni-node/blob/main/censustree/censustree.go"},"Go impl")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[V]")," StartBlock is reached, ",(0,i.kt)("strong",{parentName:"li"},"process starts")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[V]")," Last merkle tree root becomes ",(0,i.kt)("strong",{parentName:"li"},"censusRoot")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[V+U]")," ",(0,i.kt)("strong",{parentName:"li"},"Get MerkleProof"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Vochain will send the ",(0,i.kt)("em",{parentName:"li"},"'compressed MerkleProof'")," (which are the siblings compressed)"),(0,i.kt)("li",{parentName:"ul"},"Client side will need to 'decompress' it",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The logic to decompress the siblings ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/arbo/blob/master/tree.go#L606"},"can be found here")),(0,i.kt)("li",{parentName:"ul"},"And ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/arbo/blob/master/tree.go#L577"},"here")," the explaination of the encoding"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U+G]")," ",(0,i.kt)("strong",{parentName:"li"},"Get ProvingKey & WitnessCalc"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Proving Key & Witness Calc")," depend on the circuit being used"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U]")," ",(0,i.kt)("strong",{parentName:"li"},"Generate zkInputs"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"check the ",(0,i.kt)("a",{parentName:"li",href:"#zkinputs-generation"},"zkInputs generation")," section for more details"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U]")," ",(0,i.kt)("strong",{parentName:"li"},"Generate zkSNARK proof"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"using: ",(0,i.kt)("em",{parentName:"li"},"zkInputs + Proving Key + Witness Calculator")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U]")," ",(0,i.kt)("strong",{parentName:"li"},"Cast the vote")," with zkSNARK proof",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"contains:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"public inputs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"zkProof")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"vote")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[V]")," ",(0,i.kt)("strong",{parentName:"li"},"Verify zkSNARK proof"),", accept the vote",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Needs to know:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ElectionID"),(0,i.kt)("li",{parentName:"ul"},"Verification Key (depends on the circuit being used (census size))"),(0,i.kt)("li",{parentName:"ul"},"User's ",(0,i.kt)("em",{parentName:"li"},"public inputs")," + ",(0,i.kt)("em",{parentName:"li"},"zkProof"))))))),(0,i.kt)("h4",{id:"flow-for-csv-voting"},"Flow for csv voting"),(0,i.kt)("p",null,"::: tip\n",(0,i.kt)("strong",{parentName:"p"},"Important"),": This scheme assumes fully trusting the ",(0,i.kt)("em",{parentName:"p"},"organization"),", as the\n",(0,i.kt)("em",{parentName:"p"},"organization")," could add non-real users to the census that later can be used\nto issue valid votes."),(0,i.kt)("p",null,"This use case would set the flag ",(0,i.kt)("inlineCode",{parentName:"p"},"preRegister=true")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"CensusOrigin")," would be ",(0,i.kt)("inlineCode",{parentName:"p"},"OFF_CHAIN_TREE")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"OFF_CHAIN_TREE_WEIGHTED"),".\n:::"),(0,i.kt)("mermaid",{value:"%%{init: {'theme':'forest'}}%%\n\nsequenceDiagram\nopt Steps 1-2 for the csv processes\n  Organizer->>Organizer: 0.1. create user login keys\n  Organizer->>Organizer: 0.2. build merkleTree with login keys\n  Organizer->>Vochain: 1. create new voting process (newProcessTx) & define the CensusOrigin=OFF_CHAIN_TREE\n  User->>User: 2. generate CensusRegisterProof of type csv-merkletree\nend\nUser->>User: 3. generate zkCensusKey\nUser->>Vochain: 4. register zkCensusKey using CensusRegisterProof (registerKeyTx)\nNote over Organizer,User: From here continues with the normal flow"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"0.1. ",(0,i.kt)("em",{parentName:"li"},"[O]")," Create user ",(0,i.kt)("strong",{parentName:"li"},"login keys"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"from csv data"))),(0,i.kt)("li",{parentName:"ul"},"0.2. ",(0,i.kt)("em",{parentName:"li"},"[O]")," Build ",(0,i.kt)("strong",{parentName:"li"},"MerkleTree")," with login keys"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[O+V]")," Create ",(0,i.kt)("strong",{parentName:"li"},"new voting process")," (newProcessTx) & define the ",(0,i.kt)("inlineCode",{parentName:"li"},"CensusOrigin=OFF_CHAIN_TREE"))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"CensusOrigin")," determines the checks:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the given ",(0,i.kt)("em",{parentName:"li"},"MerkleProof")," matches with the defined ",(0,i.kt)("em",{parentName:"li"},"Census Root")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("ol",{parentName:"li",start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U]")," Generate ",(0,i.kt)("strong",{parentName:"li"},"CensusRegisterProof"))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"which is the MerkleProof that the user 'login key' is in the tree "))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("ol",{parentName:"li",start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U]")," Generate ",(0,i.kt)("strong",{parentName:"li"},"zkCensusKey")," (used as leaf key)")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"User's ",(0,i.kt)("em",{parentName:"li"},"zkCensusKey"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"zkCensusKey = Hash(userSecret)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Here ",(0,i.kt)("inlineCode",{parentName:"li"},"userSecret")," can be ",(0,i.kt)("inlineCode",{parentName:"li"},"csv user's data + secret from user")),(0,i.kt)("li",{parentName:"ul"},"This is the key that will be added into the ",(0,i.kt)("em",{parentName:"li"},"CensusTree")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("ol",{parentName:"li",start:4},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"[U+V]")," ",(0,i.kt)("strong",{parentName:"li"},"Register zkCensusKey")," using ",(0,i.kt)("strong",{parentName:"li"},"CensusRegisterProof")," (registerKeyTx)")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Vochain checks that the ",(0,i.kt)("strong",{parentName:"li"},"CensusRegistryProof")," can be validated for the ",(0,i.kt)("strong",{parentName:"li"},"CensusOrigin"))))),(0,i.kt)("p",null,"::: tip\nThe organization could also directly register ",(0,i.kt)("em",{parentName:"p"},"Users'")," secret keys to the Vochain, avoiding the need for a registration phase. This option would use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProcessMode")," flags "),(0,i.kt)("p",null,"This use case would set the flag ",(0,i.kt)("inlineCode",{parentName:"p"},"preRegister=false")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"CensusOrigin")," would be ",(0,i.kt)("inlineCode",{parentName:"p"},"OFF_CHAIN_TREE")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"OFF_CHAIN_TREE_WEIGHTED")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"CensusRoot")," determined by the Organization.\n:::"),(0,i.kt)("h3",{id:"merkle-tree"},"Merkle Tree"),(0,i.kt)("p",null,"The MerkleTree used for building the ",(0,i.kt)("em",{parentName:"p"},"anonymous census")," needs to be a zkSNARK-friendly implementation. As currently we are using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iden3/circom"},"Circom")," for the zkSNARK circuits, we need to be compatible with the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iden3/circomlib/tree/master/circuits/smt"},"circomlib")," MerkleTree implementation. A specification of the MerkleTree ",(0,i.kt)("a",{parentName:"p",href:"https://docs.iden3.io/publications/pdfs/Merkle-Tree.pdf"},"can be found here"),"."),(0,i.kt)("p",null,"In the Vochain, we're using the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/vocdoni/arbo"},"arbo")," MerkleTree, which is a Go implementation compatible with the Circom spec."),(0,i.kt)("p",null,"The MerkleTree uses the ",(0,i.kt)("a",{parentName:"p",href:"https://eprint.iacr.org/2019/458.pdf"},"Poseidon")," hash, which is a 'snark-friendly' hash function that later on can be proved inside a circuit without requiring too many constraints."),(0,i.kt)("p",null,"The following diagram contains a visual representation of the data structure of the Leaves of the MerkleTree being used in the scheme of the zk-census-proof."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Poseidon merkle tree with zk census proof",src:n(64723).Z,width:"418",height:"326"})),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," value is determined by the ",(0,i.kt)("em",{parentName:"p"},"CensusTree")," builder, which has an ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," value for each ",(0,i.kt)("em",{parentName:"p"},"CensusTree"),". This value increments with the addition of each new leaf."),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Leaves")," are structured in this way in order to use the MerkleTrees more efficiently, allowing more user keys to fit inside a smaller tree and therefore reducing the zk circuit size. This is because the value of any given leaf's ",(0,i.kt)("em",{parentName:"p"},"key")," determines that leaf's ",(0,i.kt)("em",{parentName:"p"},"position")," on the tree. If the leaf key were determined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"zkCensusKey"),", rather than an incremental ",(0,i.kt)("inlineCode",{parentName:"p"},"index"),", each new leaf would have a significant chance of collision before filling all the available leaf spots for a given height. Trees would therefore be less balanced and require larger circuits for the same census size due to inefficient use of tree space. With the incremental index approach, on the other hand, all the leaf spots can be filled without a single collision. This produces much smaller circuits for the same number of users."),(0,i.kt)("h3",{id:"zkinputs-generation"},"zkInputs generation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// Example of zkInputs\n{\n    "censusRoot": "51642541620950251760298704744678482162425252475654827255045491135352807540162",\n    "censusSiblings": ["0","0","0","0"],\n    "index": "30",\n    "secretKey": "6190793965647866647574058687473278714480561351424348391693421151024369116465",\n    "voteHash": ["100964581237483263846637432502620436451", "278307331411790712608582894981321409946"],\n    "processId": ["115971795979716226347584900263213958763", "100167351390541057173626244722405453127"],\n    "nullifier": "1938187656076799017313903315498318464349291455761501098436114043715056719301",\n}\n')),(0,i.kt)("p",null,"Origin of each zkInput parameter:\n::: tip\n",(0,i.kt)("em",{parentName:"p"},"all the parameters are ",(0,i.kt)("inlineCode",{parentName:"em"},"string")," or ",(0,i.kt)("inlineCode",{parentName:"em"},"[]string")," that represent ",(0,i.kt)("inlineCode",{parentName:"em"},"bigInt")," or ",(0,i.kt)("inlineCode",{parentName:"em"},"[]bigInt")),"\n:::"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"censusRoot"),": computed by the ",(0,i.kt)("em",{parentName:"li"},"CensusAuthority")," from the ",(0,i.kt)("em",{parentName:"li"},"Census Tree")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"censusSiblings"),": computed by the ",(0,i.kt)("em",{parentName:"li"},"CensusAuthority"),", is the ",(0,i.kt)("em",{parentName:"li"},"Merkle Proof"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("em",{parentName:"li"},"User")," retrieves the ",(0,i.kt)("em",{parentName:"li"},"siblings")," from the ",(0,i.kt)("em",{parentName:"li"},"Vochain")," through the ",(0,i.kt)("em",{parentName:"li"},"Gateway")),(0,i.kt)("li",{parentName:"ul"},"the length of ",(0,i.kt)("em",{parentName:"li"},"censusSiblings")," will depend on the ",(0,i.kt)("em",{parentName:"li"},"zkCircuit"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The design of the ",(0,i.kt)("em",{parentName:"li"},"MerkleTree")," used in circomlib provokes different lengths in the siblings returned when generating a ",(0,i.kt)("em",{parentName:"li"},"MerkleProof")))),(0,i.kt)("li",{parentName:"ul"},"This is due the design of the ",(0,i.kt)("em",{parentName:"li"},"MerkleTree")," defines a tree in which the deep of the tree (from the root to the leafs) will depend on each leaf and its neighbors. More details can be found in the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.iden3.io/publications/pdfs/Merkle-Tree.pdf"},(0,i.kt)("em",{parentName:"a"},"MerkleTree")," spec"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In order to input those siblings into the circuit, the ",(0,i.kt)("inlineCode",{parentName:"li"},"nLevels")," of the circuit is fixed, so the length of ",(0,i.kt)("em",{parentName:"li"},"siblings")," needs to be fixed also."),(0,i.kt)("li",{parentName:"ul"},"So, the len(siblings) will depend on the ",(0,i.kt)("em",{parentName:"li"},"zkCircuit")," being used, specifically from the ",(0,i.kt)("inlineCode",{parentName:"li"},"nLevels")," parameter of the circuit"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"index"),": determined by the Vochain when adding the ",(0,i.kt)("em",{parentName:"li"},"User"),"'s ",(0,i.kt)("em",{parentName:"li"},"zkCensusKey")," into the ",(0,i.kt)("em",{parentName:"li"},"CensusTree")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"secretKey"),": generated by the ",(0,i.kt)("em",{parentName:"li"},"User")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"voteHash"),": hashed value of the ",(0,i.kt)("em",{parentName:"li"},"User")," vote, composed by two big integers.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The raw user vote is a variable-length array of values and its values do not need to be checked in the circuit. Furthermore, the values can be encrypted."),(0,i.kt)("li",{parentName:"ul"},"Since the encoded vote values may not fit into a constant number of circuit inputs, we calculate a summary of the raw user vote using an EVM-friendly hash function: ",(0,i.kt)("inlineCode",{parentName:"li"},"sha256(vote_bytes)"),".  The output of the sha256 hash is slightly larger than the field used in SNARKS, so we split the hash output (32-bytes) into 2 16-byte arrays, take them as integers (in little-endian), and use them as circuit inputs.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sha256")," hash is used, as if necessary in the future it can be ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/iden3/circomlib/blob/master/circuits/sha256/sha256.circom"},"verified inside")," the circuit. This usage has two characteristics to keep in mind:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sha256")," is twice as expensive as ",(0,i.kt)("inlineCode",{parentName:"li"},"keccak256")," in terms of gas in EVM, but it is implemented in ",(0,i.kt)("inlineCode",{parentName:"li"},"circom"),", so it can be checked inside a circuit (keccak256 is also ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/keccak256-circom"},"implemented inside a circuit"),", but it takes too many constraints for the current use case)"),(0,i.kt)("li",{parentName:"ul"},"checking the ",(0,i.kt)("inlineCode",{parentName:"li"},"sha256")," inside a circom circuit is expensive in terms of number of constraints (in the current version of this spec, this is not checked inside the circuit)"))))),(0,i.kt)("li",{parentName:"ul"},"example:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"h := sha256.Sum256(voteBytes) // voteBytes can be the votes array converted to bytes, or the encrypted votes\nb1 := new(big.Int).SetBytes(swapEndianness(h[:16])) // swap endianness, as golang big int package works in big-endian, and we use little-endian\nb2 := new(big.Int).SetBytes(swapEndianness(h[16:]))\n")),"And the json input of the ",(0,i.kt)("inlineCode",{parentName:"li"},"voteHash")," for the circuit would be: ",(0,i.kt)("inlineCode",{parentName:"li"},'"voteHash": [b1, b2]')))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"processId"),": the process ID in which the ",(0,i.kt)("em",{parentName:"li"},"User")," is participating. As the process ID is a 32 byte array, we use the same method used for the ",(0,i.kt)("inlineCode",{parentName:"li"},"voteHash"),": the 32 bytes of process ID are splitted by the half, and each one is represented as a big integer (little-endian).",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"  processID0 := new(big.Int).SetBytes(swapEndianness(processIDBytes[:16])) // swap endianness, as golang big int package works in big-endian, and we use little-endian\n  processID1 := new(big.Int).SetBytes(swapEndianness(processIDBytes[16:]))\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"nullifier"),": computed by ",(0,i.kt)("em",{parentName:"li"},"User"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nullifier = poseidon.Hash(sk, processID[0], processID[1])"))))),(0,i.kt)("h3",{id:"circuit-identification"},"Circuit identification"),(0,i.kt)("p",null,"There will be different circuits of the ",(0,i.kt)("inlineCode",{parentName:"p"},"zk-census-proof")," depending on the census size, also there could be more use cases with different circuit designs.\nBoth the client and the Vochain need a way to univocally identify those circuits, in order to user the proper ",(0,i.kt)("inlineCode",{parentName:"p"},"Proving key"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Witness calculator")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Verification key")," for each circuit."),(0,i.kt)("p",null,"Circuits are identified across the stack by using a Protobuf enum type. Each ",(0,i.kt)("inlineCode",{parentName:"p"},"ProofZkSNARK")," protobuf package will have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Type")," identifier indicating which circuit the proof belongs to, so the Vochain knows which ",(0,i.kt)("inlineCode",{parentName:"p"},"Verification Key")," to use for verifying the proof."),(0,i.kt)("p",null,"Format: ",(0,i.kt)("inlineCode",{parentName:"p"},"CIRCUITNAME_PARAMETER1_PARAMETER2")),(0,i.kt)("p",null,"List of current types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ZKCENSUSPROOF_NLEVELS"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Circuit name: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/zk-franchise-proof-circuit/blob/master/circuit/census.circom"},(0,i.kt)("inlineCode",{parentName:"a"},"ZKCENSUSPROOF"))),(0,i.kt)("li",{parentName:"ul"},"Parameters: ",(0,i.kt)("inlineCode",{parentName:"li"},"nLevels")),(0,i.kt)("li",{parentName:"ul"},"Example:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ZKCENSUSPROOF_100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ZKCENSUSPROOF_1000"))))))),(0,i.kt)("h1",{id:"annex"},"Annex"),(0,i.kt)("h4",{id:"examples-of-flags-combinations"},"Examples of flags combinations"),(0,i.kt)("p",null,"Below there are listed some common combinations of flags used when created a new process:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Census MerkleTree (from CSV file or private database) with pre-register: ",(0,i.kt)("inlineCode",{parentName:"li"},"preRegister=true"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"CensusOrigin=OFF_CHAIN_TREE")),(0,i.kt)("li",{parentName:"ul"},"Census MerkleTree (from CSV file or private database) with the Organization defining the ",(0,i.kt)("inlineCode",{parentName:"li"},"CensusRoot")," (creating the user's keys, without pre-register phase): ",(0,i.kt)("inlineCode",{parentName:"li"},"preRegister=false"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"CensusOrigin=OFF_CHAIN_TREE"))),(0,i.kt)("h4",{id:"keykeepers-reveal-and-commit-keys"},"KeyKeepers reveal and commit keys"),(0,i.kt)("p",null,"A set of commitment keys are generated for each election process by a set of trusted identities named ",(0,i.kt)("inlineCode",{parentName:"p"},"keykeepers"),". Only if all ",(0,i.kt)("inlineCode",{parentName:"p"},"keykeepers")," are malicious could they tamper with the process, so it is crucial to distribute these special identities well. Once all these keys are revealed, anyone can generate a valid proof. This mechanism is added to the circuit in order to avoid vote buying when the process is over. Since anyone can now generate a valid proof, a voter will no longer be able to prove that they are the owner of a specific vote nullifier."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Circuit with keykeepers diagram",src:n(5932).Z,width:"1273",height:"665"})),(0,i.kt)("p",null,"zkInputs of this alternative scheme:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// Example of zkInputs\n{\n    "censusRoot": "51642541620950251760298704744678482162425252475654827255045491135352807540162",\n    "censusSiblings": ["0","0","0","0"],\n    "secretKey": "6190793965647866647574058687473278714480561351424348391693421151024369116465",\n    "voteHash": ["100964581237483263846637432502620436451", "278307331411790712608582894981321409946"],\n    "processId": ["242108076058607163538102198631955675649", "142667662805314151155817304537028292174"],\n    "nullifier": "1938187656076799017313903315498318464349291455761501098436114043715056719301",\n    "relayerPublicKey": "100",\n    "relayerProof": "21349690342514405503176665977362532634490340702670001813783738965751319356478",\n    "revealKey": ["0"],\n    "commitKey": ["19014214495641488759237505126948346942972912379615652741039992445865937985820"]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"relayerPublicKey"),": given by the ",(0,i.kt)("em",{parentName:"li"},"KeyKeeper")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"relayerProof"),": computed by the ",(0,i.kt)("em",{parentName:"li"},"User"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"relayerProof = poseidon.Hash(nullifier, relayerPublicKey)")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"revealKey"),": not known by the user at the proof generation moment",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the length of this array is determined by the ",(0,i.kt)("inlineCode",{parentName:"li"},"nMiners")," parameter of the circuit"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"commitKey"),": given by the ",(0,i.kt)("em",{parentName:"li"},"KeyKeeper"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the length of this array is determined by the ",(0,i.kt)("inlineCode",{parentName:"li"},"nMiners")," parameter of the circuit"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"poseidon.Hash(relayerPublicKey)"))))))}c.isMDXComponent=!0},13942:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/zk-census-proof-circuit-diagram-bc673914a32b2a293fca6746bb2a0e4e.png"},5932:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/zk-census-proof-circuit-with-keykeepers-keys-diagram-be6db3f298d3ab0e15046cb8233aff66.png"},64723:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/zk-census-proof-poseidon-merkletree-diagram-322663a58bc45d4bd2f43e7bf9016dd7.png"}}]);