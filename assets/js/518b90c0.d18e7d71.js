"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[7037],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},21993:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const o={},i="Organization Metadata",s={unversionedId:"protocol/data-schemes/organization",id:"protocol/data-schemes/organization",title:"Organization Metadata",description:"The metadata of an organization provides human readable content, featuring names, descriptions, images, the list of available processes and more.",source:"@site/docs/protocol/data-schemes/organization.md",sourceDirName:"protocol/data-schemes",slug:"/protocol/data-schemes/organization",permalink:"/protocol/data-schemes/organization",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Election Metadata",permalink:"/protocol/data-schemes/election"},next:{title:"Vote Data",permalink:"/protocol/data-schemes/vote"}},l={},c=[{value:"JSON schema",id:"json-schema",level:2},{value:"Register",id:"register",level:4}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"organization-metadata"},"Organization Metadata"),(0,a.kt)("p",null,"The metadata of an organization provides human readable content, featuring names, descriptions, images, the list of available processes and more."),(0,a.kt)("h2",{id:"json-schema"},"JSON schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "version": "1.0",\n  // The first language in the list is the default one\n  // Use "default" or https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n  "languages": ["en", "fr"],\n  "name": {\n    "en": "Free Republic of Liberland",\n    "fr": "R\xe9publique Libre de Liberland"\n  },\n  "description": {\n    "en": "In a sovereign state...",\n    "fr": "Dans un \xe9tat souverain..."\n  },\n  "votingProcesses": {\n    "active":["0x987...","0x876..."], // Process ID of the active votes\n    "ended":["0x887...","0x886..."]   // Process ID of the ended votes\n  },\n  "newsFeed": {  // Unused, subject to revision\n    "en": "ipfs://34567,https://hipsterpixel.co/feed.json",\n    "fr": "ipfs://23456,https://feed2json.org/convert?url=http://www.intertwingly.net/blog/index.atom"\n  },\n  "media": {\n    "avatar": "https://liberland.org/logo.png,ipfs://12345,ipfs://12345",\n    "header": "https://liberland.org/header.png,ipfs://12345,ipfs://12345",\n  },\n  \n  "actions": [ <ActionSchema>, ... ], // Unused, subject to revision\n\n  "bootEntities": [ <OrganizationReference>, ... ],  // Unused, subject to revision\n\n  "fallbackBootNodeEntities": [ <OrganizationReference>, ... ],  // Unused, subject to revision\n  \n  "trustedEntities": [ <OrganizationReference>, ... ],  // Unused, subject to revision\n  \n  "censusServiceManagedEntities": [ <OrganizationReference>, ... ]  // Unused, subject to revision\n}\n')),(0,a.kt)("h4",{id:"register"},"Register"),(0,a.kt)("p",null,"Open a registration form within the client app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "register",\n    "actionKey": "sign-up",   // The name you give to identify the action\n\n    "name": {\n        "default": "Register",\n        "fr": "S\'inscrire"\n    },\n\n    // The URL to POST the provided data to.\n    // See the format below.\n    "url": "https://census-registry.cloud/lambda/actions/",\n\n    // Endpoint to query for the visibility (if dynamic).\n    // Returning true will show the action and hide it otherwise.\n    // See Action Visibility below.\n    "visible": "https://census-registry.cloud/lambda/actions/"\n\n    // "visible": "always"    (or make it always visible)\n}\n')),(0,a.kt)("p",null,"The body of the POST request submitted to ",(0,a.kt)("inlineCode",{parentName:"p"},"url")," will contain a JSON body like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "request": {\n    "method": "register",\n    "actionKey": "sign-up",\n    "organizationId": "0xaabbccdd...",\n    "firstName": "John",\n    "lastName:": "Snow",\n    "dateOfBirth": "2020-02-19T10:09:19.738Z",\n    "email": "john@snow.me",\n    "phone": "+1235678838",\n    "timestamp": 1556110671\n  },\n  "signature": "0x1234..." // The public key will be extracted from the signature\n\u0323}\n')),(0,a.kt)("p",null,"As this all happens through Gateway requests, ",(0,a.kt)("inlineCode",{parentName:"p"},"signature")," is computed from the stringified JSON of ",(0,a.kt)("inlineCode",{parentName:"p"},"request"),", where its keys are sorted alphabetically."),(0,a.kt)("p",null,"The response from the backend should look like like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "ok": true,\n    // "error": "Something went wrong",  // Only if `ok` == false\n    "timestamp": 1556110671\n  },\n  "signature": "" // Empty until registry public keys are available\n}\n')))}u.isMDXComponent=!0}}]);