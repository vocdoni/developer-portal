"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[4201],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={},o="Entity Metadata",s={unversionedId:"protocol/DataSchemes/entity-metadata",id:"protocol/DataSchemes/entity-metadata",title:"Entity Metadata",description:"The metadata of an entity is represented as a JSON file that conforms to a specific schema. This data is typically retrieved using a P2P storage system like IPFS.",source:"@site/docs/protocol/10-DataSchemes/01-entity-metadata.md",sourceDirName:"protocol/10-DataSchemes",slug:"/protocol/DataSchemes/entity-metadata",permalink:"/protocol/DataSchemes/entity-metadata",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"protocol",previous:{title:"Ballot Protocol",permalink:"/protocol/ballot"},next:{title:"Process Data Schemes",permalink:"/protocol/DataSchemes/process"}},l={},c=[{value:"JSON schema",id:"json-schema",level:2},{value:"Register",id:"register",level:4}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"entity-metadata"},"Entity Metadata"),(0,r.kt)("p",null,"The metadata of an entity is represented as a ",(0,r.kt)("a",{parentName:"p",href:"#json-schema"},"JSON file")," that conforms to a specific schema. This data is typically retrieved using a P2P storage system like IPFS."),(0,r.kt)("p",null,"The metadata of an entity provides human readable content, featuring names, descriptions, images, the list of available processes and more."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#entity-metadata"},"Entity Metadata"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#json-schema"},"JSON schema"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#register"},"Register"))))))),(0,r.kt)("h2",{id:"json-schema"},"JSON schema"),(0,r.kt)("p",null,"To fetch the metadata of an entity, client applications are expected to fetch the value of the ENS Text Record ",(0,r.kt)("inlineCode",{parentName:"p"},"vnd.vocdoni.meta"),", which contains a Content URI."),(0,r.kt)("p",null,"The Content URI is expected to point to a JSON file, conforming to the following schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "version": "1.0",\n  // The first language in the list is the default one\n  // Use "default" or https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n  "languages": ["en", "fr"],\n  "name": {\n    "en": "Free Republic of Liberland",\n    "fr": "R\xe9publique Libre de Liberland"\n  },\n  "description": {\n    "en": "In a sovereign state...",\n    "fr": "Dans un \xe9tat souverain..."\n  },\n  "votingProcesses": {\n    "active":["0x987...","0x876..."], // Process ID of the active votes\n    "ended":["0x887...","0x886..."]   // Process ID of the ended votes\n  },\n  "newsFeed": {  // Unused, subject to revision\n    "en": "ipfs://34567,https://hipsterpixel.co/feed.json",\n    "fr": "ipfs://23456,https://feed2json.org/convert?url=http://www.intertwingly.net/blog/index.atom"\n  },\n  "media": {\n    "avatar": "https://liberland.org/logo.png,ipfs://12345,ipfs://12345",\n    "header": "https://liberland.org/header.png,ipfs://12345,ipfs://12345",\n  },\n  \n  "actions": [ <ActionSchema>, ... ], // Unused, subject to revision\n\n  "bootEntities": [ <EntityReference>, ... ],  // Unused, subject to revision\n\n  "fallbackBootNodeEntities": [ <EntityReference>, ... ],  // Unused, subject to revision\n  \n  "trustedEntities": [ <EntityReference>, ... ],  // Unused, subject to revision\n  \n  "censusServiceManagedEntities": [ <EntityReference>, ... ]  // Unused, subject to revision\n}\n')),(0,r.kt)("h4",{id:"register"},"Register"),(0,r.kt)("p",null,"Open a registration form within the client app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "register",\n    "actionKey": "sign-up",   // The name you give to identify the action\n\n    "name": {\n        "default": "Register",\n        "fr": "S\'inscrire"\n    },\n\n    // The URL to POST the provided data to.\n    // See the format below.\n    "url": "https://census-registry.cloud/lambda/actions/",\n\n    // Endpoint to query for the visibility (if dynamic).\n    // Returning true will show the action and hide it otherwise.\n    // See Action Visibility below.\n    "visible": "https://census-registry.cloud/lambda/actions/"\n\n    // "visible": "always"    (or make it always visible)\n}\n')),(0,r.kt)("p",null,"The body of the POST request submitted to ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," will contain a JSON body like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "request": {\n    "method": "register",\n    "actionKey": "sign-up",\n    "entityId": "0xaabbccdd...",\n    "firstName": "John",\n    "lastName:": "Snow",\n    "dateOfBirth": "2020-02-19T10:09:19.738Z",\n    "email": "john@snow.me",\n    "phone": "+1235678838",\n    "timestamp": 1556110671\n  },\n  "signature": "0x1234..." // The public key will be extracted from the signature\n\u0323}\n')),(0,r.kt)("p",null,"As this all happens through Gateway requests, ",(0,r.kt)("inlineCode",{parentName:"p"},"signature")," is computed from the stringified JSON of ",(0,r.kt)("inlineCode",{parentName:"p"},"request"),", where its keys are sorted alphabetically."),(0,r.kt)("p",null,"The response from the backend should look like like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "ok": true,\n    // "error": "Something went wrong",  // Only if `ok` == false\n    "timestamp": 1556110671\n  },\n  "signature": "" // Empty until registry public keys are available\n}\n')))}u.isMDXComponent=!0}}]);