"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[9232],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>N});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),N=r,g=m["".concat(d,".").concat(N)]||m[N]||k[N]||l;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function N(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},66962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={},i="Census3 Service",o={unversionedId:"protocol/census/on-chain/census3",id:"protocol/census/on-chain/census3",title:"Census3 Service",description:"The Census3 Service is an API service which provides an easy way to create censuses for elections with holders of a single token or a combination of them. This is a wrapper of the on-chain census design and enables integrators to use on-chain censuses without manually registering tokens or generating storage proofs.",source:"@site/docs/protocol/census/on-chain/census3.md",sourceDirName:"protocol/census/on-chain",slug:"/protocol/census/on-chain/census3",permalink:"/protocol/census/on-chain/census3",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"On-Chain Census",permalink:"/protocol/census/on-chain/"},next:{title:"ERC-20 Token Storage Proofs",permalink:"/protocol/census/on-chain/eth-storage-proofs"}},d={},s=[{value:"Using the Census3 Service",id:"using-the-census3-service",level:2},{value:"Registering a token",id:"registering-a-token",level:3},{value:"Creating a strategy",id:"creating-a-strategy",level:3},{value:"Predicates",id:"predicates",level:4},{value:"Operators",id:"operators",level:4},{value:"Generating a census",id:"generating-a-census",level:3},{value:"API Defintion",id:"api-defintion",level:2},{value:"API Info",id:"api-info",level:3},{value:"GET <code>/info</code>",id:"get-info",level:4},{value:"Tokens",id:"tokens",level:3},{value:"GET <code>/tokens</code>",id:"get-tokens",level:4},{value:"GET <code>/tokens/types</code>",id:"get-tokenstypes",level:4},{value:"POST <code>/tokens</code>",id:"post-tokens",level:4},{value:"GET <code>/tokens/{tokenID}?chainID={chainID}&amp;externalID={externalID}</code>",id:"get-tokenstokenidchainidchainidexternalidexternalid",level:4},{value:"GET <code>/tokens/{tokenID}/holders/{holderID}?chainID={chainID}&amp;externalID={externalID}</code>",id:"get-tokenstokenidholdersholderidchainidchainidexternalidexternalid",level:4},{value:"Strategies",id:"strategies",level:3},{value:"GET <code>/strategies</code>",id:"get-strategies",level:4},{value:"POST <code>/strategies</code>",id:"post-strategies",level:4},{value:"POST <code>/strategies/import/{cid}</code>",id:"post-strategiesimportcid",level:4},{value:"GET <code>/strategies/import/queue/{queueID}</code>",id:"get-strategiesimportqueuequeueid",level:4},{value:"GET <code>/strategies/{strategyID}</code>",id:"get-strategiesstrategyid",level:4},{value:"GET <code>/strategies/{strategyID}/estimation?anonymous={true|false}</code>",id:"get-strategiesstrategyidestimationanonymoustruefalse",level:4},{value:"GET <code>/strategies/{strategyID}/estimation/queue/{queueID}</code>",id:"get-strategiesstrategyidestimationqueuequeueid",level:4},{value:"GET <code>/strategies/{strategyID}/holders</code>",id:"get-strategiesstrategyidholders",level:4},{value:"GET <code>/strategies/token/{tokenID}?chainID={chainID}&amp;externalID={externalID}</code>",id:"get-strategiestokentokenidchainidchainidexternalidexternalid",level:4},{value:"POST <code>/strategies/predicate/validate</code>",id:"post-strategiespredicatevalidate",level:4},{value:"GET <code>/strategies/predicate/operators</code>",id:"get-strategiespredicateoperators",level:4},{value:"Censuses",id:"censuses",level:3},{value:"POST <code>/censuses</code>",id:"post-censuses",level:4},{value:"GET <code>/censuses/{censusID}</code>",id:"get-censusescensusid",level:4},{value:"GET <code>/censuses/queue/{queueID}</code>",id:"get-censusesqueuequeueid",level:4},{value:"GET <code>/censuses/strategy/{strategyID}</code>",id:"get-censusesstrategystrategyid",level:4}],p={toc:s};function k(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"census3-service"},"Census3 Service"),(0,r.kt)("p",null,"The Census3 Service is an API service which provides an easy way to create censuses for elections with holders of a single token or a combination of them. This is a wrapper of the on-chain census design and enables integrators to use on-chain censuses without manually registering tokens or generating storage proofs."),(0,r.kt)("admonition",{title:"census3",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This section only describes how the Census3 service works. In order to use this service, we recommend using the Vocdoni SDK ",(0,r.kt)("a",{parentName:"p",href:"/sdk/reference/classes/vocdonisdkclient"},"Census3 client"),". The details for using the census3 client are documented ",(0,r.kt)("a",{parentName:"p",href:"/sdk/integration-details/census-types/on-chain"},"here"),".")),(0,r.kt)("p",null,"The service creates a list of token-holder addresses and balances for every registered token. It does this by regularly scanning Ethereum-based networks and analyzing all transactions. In order to generate a census, the service uses token-holder data to create a Merkle Tree with the relation ",(0,r.kt)("inlineCode",{parentName:"p"},"HolderAddress"),"->",(0,r.kt)("inlineCode",{parentName:"p"},"Balance"),". This Merkle tree represents a census identically to an ",(0,r.kt)("a",{parentName:"p",href:"/protocol/census/off-chain-tree"},"off-chain merkle tree census"),", with those those holders as the set of voters and their balances as vote weights."),(0,r.kt)("h2",{id:"using-the-census3-service"},"Using the Census3 Service"),(0,r.kt)("p",null,"There are three main steps in using the Census3 Service: registering a token, creating a strategy, and generating a census."),(0,r.kt)("h3",{id:"registering-a-token"},"Registering a token"),(0,r.kt)("p",null,"Before a token can be used to create a census, it must be registered. A user requests that the service register a given token, and the service then begins to scan the target Ethereum network for transactions, building an index of that token. This may take some time."),(0,r.kt)("p",null,"The service suports the following token types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ERC20"),(0,r.kt)("li",{parentName:"ul"},"ERC721"),(0,r.kt)("li",{parentName:"ul"},"ERC777"),(0,r.kt)("li",{parentName:"ul"},"POAP"),(0,r.kt)("li",{parentName:"ul"},"Gitcoin Passport Score"),(0,r.kt)("li",{parentName:"ul"},"Gitcoin Passport Shields (",(0,r.kt)("em",{parentName:"li"},"coming soon"),")"),(0,r.kt)("li",{parentName:"ul"},"ERC1155 (",(0,r.kt)("em",{parentName:"li"},"coming soon"),")")),(0,r.kt)("admonition",{title:"token selection",type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"While all of the above token types are supported, the recommended use-case for a token-based census is a custom token created specifically to govern an organization. It is theoretically possible to create a census with a popular token such as ETH, but it would be infeasible for the Census3 service to keep an updated index of all Ethereum transactions.")),(0,r.kt)("h3",{id:"creating-a-strategy"},"Creating a strategy"),(0,r.kt)("p",null,'A strategy is the logic behind building a single Merkle Tree from the set of holders of a token. The most basic strategy is "everyone who holds token X", but there can be more restrictions such as "everyone who holds more than 900 of token X", or complex statements like "everyone who holds token X AND token Y or Z". '),(0,r.kt)("h4",{id:"predicates"},"Predicates"),(0,r.kt)("p",null,'Strategies are defined by statements called "predicates." A predicate is comprised of:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A operator, which is a function associated with a tag (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"AND"),") that is used to combine token holders and define how to combine them."),(0,r.kt)("li",{parentName:"ul"},"Token symbols (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"BTC"),"), that identify the token holders to combine.\nPredicates are structured by the following format: ",(0,r.kt)("inlineCode",{parentName:"li"},"<token_symbol> <operator> <token_symbol>"),", e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"BTC OR ETH"),". The syntax also support groups of operators, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"USDC AND (ETH OR (BTC AND DAI))"))),(0,r.kt)("h4",{id:"operators"},"Operators"),(0,r.kt)("p",null,"Each of the operators uses a different logical strategy for combining token holder balances to create a weighted census:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Powerup"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Usage"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AND")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AND")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Holders of both tokens, with a fixed weight of 1.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"OR")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"OR"),"\xa0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Holders of either or both tokens, with fixed weight of 1.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AND")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sum")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AND:sum")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Holders of both tokens, with a weight adding the token balances.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AND")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"mul")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AND:mul")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Holders of both tokens, with a weight multiplying the token balances.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"OR")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sum")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"OR:sum")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Holders of either or both tokens, with a weight adding the token balances.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"OR")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"mul")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"OR:mul")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Holders of either or both tokens, with a weight multiplying the token balances if both are non-zero, or equaling the balance that is non-zero.")))),(0,r.kt)("h3",{id:"generating-a-census"},"Generating a census"),(0,r.kt)("p",null,"A census is created from a given strategy and a registered token (or tokens) pertaining to that strategy. The service scans its index of token-holder data to accumulate a set of token holders and balance values and creates a Merkle tree to serve as the census. In the case of an anonymous census, there is one extra step called ",(0,r.kt)("a",{parentName:"p",href:"/protocol/anonymity/on-chain"},"rounding"),"."),(0,r.kt)("p",null,"Some details about the census:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The censuses are published on ",(0,r.kt)("a",{parentName:"li",href:"https://ipfs.tech/"},"IPFS")," after their creation. "),(0,r.kt)("li",{parentName:"ul"},"Census3 uses ",(0,r.kt)("a",{parentName:"li",href:"go.vocdoni.io/dvote/tree/arbo"},"go.vocdoni.io/dvote/tree/arbo")," to build the census merkle trees."),(0,r.kt)("li",{parentName:"ul"},"The censuses can be created with the holders of just one token or a combination of tokens, using ",(0,r.kt)("strong",{parentName:"li"},"complex strategies"),"."),(0,r.kt)("li",{parentName:"ul"},"The censuses are ",(0,r.kt)("em",{parentName:"li"},"zk-friendly")," and can also be used for anonymous voting.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"api-defintion"},"API Defintion"),(0,r.kt)("p",null,"The Census3 Service provides a REST API with all of the above functionality.\nThere is an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vocdoni/census3/blob/main/example.sh"},"example bash script")," that shows the basic usage of this API."),(0,r.kt)("p",null,"The service should be available at the following URLs, depending on the environment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"dev: 'https://census3-dev.vocdoni.net/api',\nstg: 'https://census3-stg.vocdoni.net/api',\nprod: 'https://census3.vocdoni.io/api',\n")),(0,r.kt)("p",null,"Endpoints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#api-info"},"API info")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#tokens"},"Tokens")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#strategies"},"Strategies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#censuses"},"Censuses"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"api-info"},"API Info"),(0,r.kt)("h4",{id:"get-info"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/info")),(0,r.kt)("p",null,"Show information about the API service."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "supportedChains": [\n        {\n            "chainID": 5,\n            "shortName": "gor",\n            "name": "Goerli"\n        },\n        {\n            "chainID": 137,\n            "shortName": "matic",\n            "name": "Polygon Mainnet"\n        },\n        {\n            "chainID": 80001,\n            "shortName": "maticmum",\n            "name": "Mumbai"\n        },\n        {\n            "chainID": 1,\n            "shortName": "eth",\n            "name": "Ethereum Mainnet"\n        }\n    ]\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding API info")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5023")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"tokens"},"Tokens"),(0,r.kt)("h4",{id:"get-tokens"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/tokens")),(0,r.kt)("p",null,"List of already added tokens."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pagination URL params")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"URL key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"pageSize")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(optional) Defines the number of results per page. By default, ",(0,r.kt)("inlineCode",{parentName:"td"},"100"),"."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"?pageSize=2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"nextCursor")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(optional) When is defined, it is used to get the page results, going forward. By default, ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"?nextCursor=0x1234"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"prevCursor")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(optional) When is defined, it is used to get the page results, going backwards. By default, ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"?prevCursor=0x1234"))))),(0,r.kt)("p",null,"The maximus default page size is 10, but if you provide a page size of ",(0,r.kt)("inlineCode",{parentName:"p"},"-1"),", the endpoint will return all the results, and it does not require to be paginated."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "tokens": [\n        {\n            "ID": "0x1324",\n            "type": "erc20",\n            "decimals": 18,\n            "startBlock": 123456,\n            "symbol": "$",\n            "totalSupply": "21323",\n            "name": "Amazing token",\n            "synced": true|false,\n            "defaultStrategy": 1,\n            "tags": "testTag1,testTag2",\n            "chainID": 1,\n            "externalID": "",\n            "chainAddress": "eth:0x1234",\n            "iconURI": "http://...png"\n        }\n    ],\n    "pagination": {\n        "nextCursor": "",\n        "prevCursor": "0x1234",\n        "pageSize": 10\n    }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," is empty, it will be ommited.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"externalID")," is empty, it will be ommited.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"204"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no tokens found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4007")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed pagination params")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4022")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting tokens information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5005")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding tokens")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5011")))),(0,r.kt)("h4",{id:"get-tokenstypes"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/tokens/types")),(0,r.kt)("p",null,"List the supported token types."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "supportedTypes": [\n        "erc20", \n        "erc721", \n        "erc777", \n        "erc1155", \n        "nation3", \n        "wANT", \n        "poap"\n    ]\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:    ")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding supported tokens types")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5012")))),(0,r.kt)("h4",{id:"post-tokens"},"POST ",(0,r.kt)("inlineCode",{parentName:"h4"},"/tokens")),(0,r.kt)("p",null,"Creates a new token in the database to be scanned. It gets the token information from the provider associated to the token type defined. If the creation success the token will be scanned in the next scanner iteration. The scan process status can be checked getting the token information."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important"),": When a token is created, the API also creates a simple strategy with just the holders of that token, which is assigned to it as ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultStrategy"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce4 request:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ID": "0x1234",\n    "type": "erc20|erc721|erc777|erc1155|nation3|wANT|poap",\n    "tags": "testTag1,testTag2",\n    "chainID": 1,\n    "externalID": "" // id for external holders providers\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"tags")," attribute is ",(0,r.kt)("em",{parentName:"p"},"optional"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"externalID")," URL parameter is ",(0,r.kt)("em",{parentName:"p"},"optional")," by default, but required for external provided tokens like POAPs.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"\xa0HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed token information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"409"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"token already created")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4009")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"chain ID provided not supported")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4013")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"the token cannot be created")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting token information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5004")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error initialising web3 client")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5019")))),(0,r.kt)("h4",{id:"get-tokenstokenidchainidchainidexternalidexternalid"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/tokens/{tokenID}?chainID={chainID}&externalID={externalID}")),(0,r.kt)("p",null,"Returns the information about the token referenced by the provided ID and chain ID, the external ID is optional."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"chainID")," URL parameter is ",(0,r.kt)("em",{parentName:"p"},"mandatory"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"externalID")," URL parameter is ",(0,r.kt)("em",{parentName:"p"},"optional")," by default, but required for external provided tokens like POAPs.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ID": "0x1324",\n    "type": "erc20",\n    "size": 120,\n    "decimals": 18,\n    "startBlock": 123456,\n    "symbol": "$",\n    "totalSupply": "21323",\n    "name": "Amazing token",\n    "status": {\n        "atBlock": 12345,\n        "synced": true|false,\n        "progress": 87\n    },\n    "defaultStrategy": 1,\n    "tags": "testTag1,testTag2",\n    "chainID": 1,\n    "externalID": "",\n    "chainAddress": "eth:0x1234",\n    "iconURI": "http://...png"\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," is empty, it will be ommited.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"externalID")," is empty, it will be ommited.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed token information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4001")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed chain ID")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4018")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no token found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4003")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting token information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5004")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding token")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5010")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"chain ID provided not supported")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5013")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error initialising web3 client")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5019")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting number of token holders")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5020")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting last block number from web3 endpoint")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5021")))),(0,r.kt)("h4",{id:"get-tokenstokenidholdersholderidchainidchainidexternalidexternalid"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/tokens/{tokenID}/holders/{holderID}?chainID={chainID}&externalID={externalID}")),(0,r.kt)("p",null,"Returns the holder balance if the holder ID is already registered in the database as a holder of the token ID and chain ID provided, the external ID is optional."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"chainID")," URL parameter is ",(0,r.kt)("em",{parentName:"p"},"mandatory"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"externalID")," URL parameter is ",(0,r.kt)("em",{parentName:"p"},"optional")," by default, but required for external provided tokens like POAPs.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "balance": "1234567890"\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed token information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4001")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed chain ID")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4018")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no token found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4003")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"token holder not found for the token provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4023")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting token holders")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5006")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"strategies"},"Strategies"),(0,r.kt)("h4",{id:"get-strategies"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies")),(0,r.kt)("p",null,"Returns the ID's list of the strategies registered."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pagination URL params")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"URL key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"pageSize")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(optional) Defines the number of results per page. By default, ",(0,r.kt)("inlineCode",{parentName:"td"},"100"),"."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"?pageSize=2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"nextCursor")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(optional) When is defined, it is used to get the page results, going forward. By default, ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"?nextCursor=3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"prevCursor")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(optional) When is defined, it is used to get the page results, going backwards. By default, ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"?prevCursor=1"))))),(0,r.kt)("p",null,"The maximus default page size is 10, but if you provide a page size of ",(0,r.kt)("inlineCode",{parentName:"p"},"-1"),", the endpoint will return all the results, and it does not require to be paginated"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "strategies": [\n        {\n            "ID": 1,\n            "alias": "default MON strategy",\n            "predicate": "MON",\n            "uri": "ipfs://...",\n            "tokens": {\n                "MON": {\n                    "ID": "0x1234",\n                    "chainID": 5,\n                    "chainAddress": "gor:0x1234",\n                    "externalID": "mon_id_on_external_holder_provider"\n                }\n            }\n        },\n        {\n            "ID": 2,\n            "alias": "default ANT strategy",\n            "predicate": "ANT",\n            "uri": "ipfs://...",\n            "tokens": {\n                "ANT": {\n                    "ID": "0x1234",\n                    "chainID": 1,\n                    "chainAddress": "eth:0x1234" \n                }\n            }\n        },\n        {\n            "ID": 3,\n            "alias": "default USDC strategy",\n            "predicate": "USDC",\n            "uri": "ipfs://...",\n            "tokens": {\n                "USDC": {\n                    "ID": "0x1234",\n                    "chainID": 1,\n                    "chainAddress": "eth:0x1234"\n                }\n            }\n        },\n        {\n            "ID": 4,\n            "alias": "strategy_alias",\n            "predicate": "MON AND (ANT OR USDC)",\n            "uri": "ipfs://...",\n            "tokens": {\n                "MON": {\n                    "ID": "0x1234",\n                    "chainID": 5,\n                    "chainAddress": "gor:0x1234",\n                    "externalID": "mon_id_on_external_holder_provider"\n                },\n                "ANT": {\n                    "ID": "0x1234",\n                    "chainID": 1,\n                    "chainAddress": "eth:0x1234",\n                    "minBalance": "1"\n                },\n                "USDC": {\n                    "ID": "0x1234",\n                    "chainID": 1,\n                    "chainAddress": "eth:0x1234"\n                }\n            }\n        }\n    ],\n    "pagination": {\n        "nextCursor": "",\n        "prevCursor": "1",\n        "pageSize": 10\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"204"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4008")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed pagination params")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4022")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting strategies information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5008")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding strategies")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5016")))),(0,r.kt)("h4",{id:"post-strategies"},"POST ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies")),(0,r.kt)("p",null,"Stores a new strategy based on the defined combination of tokens provided, these tokens must be registered previously."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce4 request:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'    {\n        "alias": "test_strategy",\n        "predicate": "(wANT OR ANT) AND USDC",\n        "tokens": {\n            "wANT": {\n                "ID": "0x1324",\n                "chainID": 1,\n                "minBalance": "10000"\n            },\n            "ANT": {\n                "ID": "0x1324",\n                "chainID": 5,\n            },\n            "USDC": {\n                "ID": "0x1324",\n                "chainID": 1,\n                "minBalance": "50"\n            },\n        }\n    }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "strategyID": 1\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no token found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4003")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed strategy provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4014")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"the predicate provided is not valid")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4015")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"the predicate includes tokens that are not included in the request")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4016")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding strategy info")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5015")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error creating strategy")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5025")))),(0,r.kt)("h4",{id:"post-strategiesimportcid"},"POST ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies/import/{cid}")),(0,r.kt)("p",null,"Imports a strategy from IPFS downloading it with the ",(0,r.kt)("inlineCode",{parentName:"p"},"cid")," provided in background. The strategy import will fail if the strategy tokens are not previously created in the database."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "queueID": "0123456789abcdef0123456789abcdef01234567"\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed strategy provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4014")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding strategy info")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5015")))),(0,r.kt)("h4",{id:"get-strategiesimportqueuequeueid"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies/import/queue/{queueID}")),(0,r.kt)("p",null,"Returns the information of the strategy that are in the creation queue."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "done": true,\n    "error": {\n        "code": 0,\n        "error": "error message or null"\n    },\n    "progress": 0,\n    "data": { /* <same_get_strategy_response> */ }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"strategy not found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4006")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed queue ID")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4011")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting strategy information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5009")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding queue item")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5022")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f possible error values inside the body:")),(0,r.kt)("small",null,"The request could response `OK 200` and at the same time includes an error because it is an error of the enqueued process and not of the request processing)."),(0,r.kt)("h4",{id:"get-strategiesstrategyid"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies/{strategyID}")),(0,r.kt)("p",null,"Returns the information of the strategy related to the provided ID."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ID": 4,\n    "alias": "strategy_alias",\n    "predicate": "MON AND (ANT OR USDC)",\n    "uri": "ipfs://...",\n    "tokens": {\n        "MON": {\n            "ID": "0x1234",\n            "chainID": 5,\n            "chainAddress": "gor:0x1234",\n            "externalID": "mon_id_on_external_holder_provider"\n        },\n        "ANT": {\n            "ID": "0x1234",\n            "chainID": 1,\n            "chainAddress": "eth:0x1234",\n            "minBalance": "1"\n        },\n        "USDC": {\n            "ID": "0x1234",\n            "chainID": 1,\n            "chainAddress": "eth:0x1234"\n        }\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed strategy ID, it must be an integer")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no strategy found with the ID provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4005")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting tokens information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5005")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting strategy information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5007")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding strategy info")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5015")))),(0,r.kt)("h4",{id:"get-strategiesstrategyidestimationanonymoustruefalse"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies/{strategyID}/estimation?anonymous={true|false}")),(0,r.kt)("p",null,"Enqueue the estimation of size and time (in milliseconds) to create the census generated for the provided strategy. It also calculates the accuracy of the resulting census, it could be different to 100% if the census will be anonymous."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "queueID": "0123456789abcdef0123456789abcdef01234567",\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed strategy ID, it must be an integer")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding strategy info")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5015")))),(0,r.kt)("h4",{id:"get-strategiesstrategyidestimationqueuequeueid"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies/{strategyID}/estimation/queue/{queueID}")),(0,r.kt)("p",null,"Returns the estimation of size and time (in milliseconds) to create the census generated for the strategy related to the queue ID."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "done": true,\n    "error": {\n        "code": 0,\n        "error": "error message or null"\n    },\n    "progress": 50,\n    "data": {\n        "size": 15000,\n        "timeToCreateCensus": 10900,\n        "accuracy": 100.0,\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no strategy found with the ID provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4005")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed queue ID")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4020")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding queue item")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5022")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f possible error values inside the body:")),(0,r.kt)("small",null,"The request could response `OK 200` and at the same time includes an error because it is an error of the enqueued process and not of the request processing)."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no strategy found with the ID provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4005")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"the predicate provided is not valid")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4015")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"204"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"strategy has not registered holders")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4017")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting strategy information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5007")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error evaluating strategy predicate")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5026")))),(0,r.kt)("h4",{id:"get-strategiesstrategyidholders"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies/{strategyID}/holders")),(0,r.kt)("p",null,"Returns the list of holders with their balances for a strategy. This endpoint only works with single token strategies like default ones."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Pagination URL params")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"URL key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"pageSize")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(optional) Defines the number of results per page. By default, ",(0,r.kt)("inlineCode",{parentName:"td"},"1000"),"."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"?pageSize=2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"nextCursor")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(optional) When is defined, it is used to get the page results, going forward. By default, ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"?nextCursor=0x1234"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"prevCursor")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(optional) When is defined, it is used to get the page results, going backwards. By default, ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"?prevCursor=0x1234"))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "holders": {\n        "0x1": "1",\n        "0x2": "2",\n        "0x3": "3",\n        "0x4": "4",\n        "0x...": "1000",\n    },\n    "pagination": {\n        "nextCursor": "0x5",\n        "prevCursor": "0x1",\n        "pageSize": 5\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed strategy ID, it must be an integer")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no token holders found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4004")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no strategy found with the ID provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4005")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed pagination params")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4022")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding token holders")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5013")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting strategy holders")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5030")))),(0,r.kt)("h4",{id:"get-strategiestokentokenidchainidchainidexternalidexternalid"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies/token/{tokenID}?chainID={chainID}&externalID={externalID}")),(0,r.kt)("p",null,"Returns strategies registered that includes the token provided for the chain also provided, the external token id is an optional parameter."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"externalID")," URL parameter is ",(0,r.kt)("em",{parentName:"p"},"optional")," by default, but required for external provided tokens like POAPs.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "strategies": [\n        {\n            "ID": 1,\n            "alias": "default MON strategy",\n            "predicate": "MON",\n            "tokens": {\n                "MON": {\n                    "ID": "0x1234",\n                    "chainID": 5,\n                    "chainAddress": "gor:0x1234"\n                }\n            }\n        },\n        {\n            "ID": 4,\n            "alias": "strategy_alias",\n            "predicate": "MON AND (ANT OR USDC)",\n            "tokens": {\n                "MON": {\n                    "ID": "0x1234",\n                    "chainID": 5,\n                    "chainAddress": "gor:0x1234",\n                    "externalID": "mon_id_on_external_holder_provider"\n                },\n                "ANT": {\n                    "ID": "0x1234",\n                    "chainID": 1,\n                    "chainAddress": "eth:0x1234",\n                    "minBalance": "1"\n                },\n                "USDC": {\n                    "ID": "0x1234",\n                    "chainID": 1,\n                    "chainAddress": "eth:0x1234"\n                }\n            }\n        }\n    ]\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"204"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4008")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting strategies information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5008")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding strategies")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5016")))),(0,r.kt)("h4",{id:"post-strategiespredicatevalidate"},"POST ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies/predicate/validate")),(0,r.kt)("p",null,"Returns if the provided strategy predicate is valid and well-formatted. If the predicate is valid the handler returns a parsed version of the predicate as a JSON."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce4 request:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "predicate": "DAI AND (ANT OR ETH)"\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "result": {\n        "childs": {\n            "operator": "AND",\n            "tokens": [\n                {\n                    "literal": "DAI"\n                },\n                {\n                    "childs": {\n                        "operator": "OR",\n                        "tokens": [\n                            {\n                                "literal": "ANT"\n                            },\n                            {\n                                "literal": "ETH"\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed strategy provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4014")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"the predicate provided is not valid")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4015")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding validated strategy predicate")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5024")))),(0,r.kt)("h4",{id:"get-strategiespredicateoperators"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/strategies/predicate/operators")),(0,r.kt)("p",null,"Returns the list of supported operators to build strategy predicates."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "operators": [\n        {\n            "description": "logical operator that returns the common token holders between symbols with fixed balance to 1",\n            "tag": "AND"\n        },\n        {\n            "description": "logical operator that returns the token holders of both symbols with fixed balance to 1",\n            "tag": "OR"\n        }\n    ]\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding supported strategy predicate operators")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5027")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"censuses"},"Censuses"),(0,r.kt)("h4",{id:"post-censuses"},"POST ",(0,r.kt)("inlineCode",{parentName:"h4"},"/censuses")),(0,r.kt)("p",null,"Request the creation of a new census with the strategy provided and returns the census ID."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce4 request:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "strategyID": 1,\n    "anonymous": false\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "queueID": "0123456789abcdef0123456789abcdef01234567"\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors :")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed strategy ID, it must be an integer")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding census")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5017")))),(0,r.kt)("h4",{id:"get-censusescensusid"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/censuses/{censusID}")),(0,r.kt)("p",null,"Returns the information of the snapshots related to the provided ID."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ \n    "ID": 2,\n    "strategyID": 1,\n    "merkleRoot": "e3cb8941e25dcdb36fc21acbe5f6c5a42e0d4f89839ae94952f0ebbd9acd04ac",\n    "uri": "ipfs://Qma....",\n    "size": 1000,\n    "weight": "200000000000000000000",\n    "anonymous": true,\n    "accuracy": 100.0\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed census ID, it must be a integer")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4001")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"census not found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4006")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting census information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5009")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding census")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5017")))),(0,r.kt)("h4",{id:"get-censusesqueuequeueid"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/censuses/queue/{queueID}")),(0,r.kt)("p",null,"Returns the information of the census that are in the creation queue."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "done": true,\n    "error": {\n        "code": 0,\n        "error": "error message or null"\n    },\n    "progress": 100,\n    "data": { /* <same_get_census_response> */ }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"census not found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4006")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed queue ID")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4011")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting census information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5009")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding queue item")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5022")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f possible error values inside the body:")),(0,r.kt)("small",null,"The request could response `OK 200` and at the same time includes an error because it is an error of the enqueued process and not of the request processing)."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no token holders found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4004")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no strategy found with the ID provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4005")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"no tokens found for the strategy provided")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4010")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"409"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"census already exists")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4012")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"the predicate provided is not valid")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4015")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"204"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"strategy has not registered holders")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4017")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error creating the census tree on the census database")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5001")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error evaluating strategy predicate")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5026")))),(0,r.kt)("h4",{id:"get-censusesstrategystrategyid"},"GET ",(0,r.kt)("inlineCode",{parentName:"h4"},"/censuses/strategy/{strategyID}")),(0,r.kt)("p",null,"Returns a list of censuses previously created for the strategy provided."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83d\udce5 response:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "censuses": [ \n        { \n            "ID": 1,\n            "strategyID": 1,\n            "merkleRoot": "e3cb8941e25dcdb36fc21acbe5f6c5a42e0d4f89839ae94952f0ebbd9acd04ac",\n            "uri": "ipfs://Qma....",\n            "size": 1000,\n            "weight": "200000000000000000000",\n            "anonymous": true,\n            "accuracy": 100.0\n        }\n    ]\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u26a0\ufe0f errors:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Internal error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"204"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4007")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"400"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"malformed census ID, it must be a integer")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4001")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"404"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"census not found")),(0,r.kt)("td",{parentName:"tr",align:"center"},"4006")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error getting census information")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5009")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"500"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"error encoding censuses")),(0,r.kt)("td",{parentName:"tr",align:"center"},"5018")))))}k.isMDXComponent=!0}}]);