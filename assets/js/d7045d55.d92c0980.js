"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[649],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),d=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=d(a),c=n,h=p["".concat(s,".").concat(c)]||p[c]||u[c]||r;return a?i.createElement(h,o(o({ref:t},m),{},{components:a})):i.createElement(h,o({ref:t},m))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var d=2;d<r;d++)o[d]=a[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2126:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=a(87462),n=(a(67294),a(3905));const r={},o="Development Guidelines",l={unversionedId:"development-guidelines/index",id:"development-guidelines/index",title:"Development Guidelines",description:"These guidelines serve both as an internal guide for our team and an overview for contributors. While we welcome contributions from the community, we do not track all of our issues on Github and we may not have the resources to onboard developers and review complex pull requests. That being said, there are multiple ways you can get involved with the project.",source:"@site/docs/development-guidelines/index.md",sourceDirName:"development-guidelines",slug:"/development-guidelines/",permalink:"/development-guidelines/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Vote Data",permalink:"/protocol/data-schemes/vote"},next:{title:"How We Work",permalink:"/development-guidelines/how-we-work"}},s={},d=[{value:"Intro",id:"intro",level:2},{value:"Task management",id:"task-management",level:2},{value:"Docs/Specs strategy",id:"docsspecs-strategy",level:2},{value:"Layers of documentation",id:"layers-of-documentation",level:3},{value:"Readme",id:"readme",level:3},{value:"Testing strategy",id:"testing-strategy",level:2},{value:"Code reviews",id:"code-reviews",level:3},{value:"Reviewing a PR",id:"reviewing-a-pr",level:4},{value:"Automated Code Review",id:"automated-code-review",level:4},{value:"Linters",id:"linters",level:2},{value:"Git branching guidelines",id:"git-branching-guidelines",level:2},{value:"Branches",id:"branches",level:3},{value:"Examples",id:"examples",level:3},{value:"New development",id:"new-development",level:4},{value:"Stage",id:"stage",level:4},{value:"Release creation",id:"release-creation",level:3},{value:"Release hotfix",id:"release-hotfix",level:3},{value:"Other considerations",id:"other-considerations",level:2}],m={toc:d};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"development-guidelines"},"Development Guidelines"),(0,n.kt)("p",null,"These guidelines serve both as an internal guide for our team and an overview for contributors. While we welcome contributions from the community, we do not track all of our issues on Github and we may not have the resources to onboard developers and review complex pull requests. That being said, there are multiple ways you can get involved with the project. "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If you have a simple bug or feature request, please submit an issue. We have many repositories, so please try to submit your issue to the relevant code base (eg. protocol feature request => ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/vocdoni-node"},"vocdoni-node"),", UI integration bugs => ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/ui-components"},"ui-components"),"). "),(0,n.kt)("li",{parentName:"ul"},"For simpler and more accessible contributions that should be possible without much onboarding, search our repositories for issues that have the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/REPO_NAME/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22"},"help-wanted")," or ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/REPO_NAME/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22"},"good-first-issue")," tags. ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Fork the Project"),(0,n.kt)("li",{parentName:"ul"},"Create your Feature Branch (",(0,n.kt)("inlineCode",{parentName:"li"},"git checkout -b feature/yourFeature"),")"),(0,n.kt)("li",{parentName:"ul"},"Commit your Changes (",(0,n.kt)("inlineCode",{parentName:"li"},"git commit -m 'Add some yourFeature'"),")"),(0,n.kt)("li",{parentName:"ul"},"Add tests according to our ",(0,n.kt)("a",{parentName:"li",href:"#testing-strategy"},"test")," guidelines"),(0,n.kt)("li",{parentName:"ul"},"Push to the Branch (",(0,n.kt)("inlineCode",{parentName:"li"},"git push origin feature/yourFeature"),")"),(0,n.kt)("li",{parentName:"ul"},"Open a Pull Request"))),(0,n.kt)("li",{parentName:"ul"},"For more complex feature requests, or if you would like to contribute further, please reach out on our ",(0,n.kt)("a",{parentName:"li",href:"https://chat.vocdoni.io"},"discord")," support channel. ")),(0,n.kt)("h2",{id:"intro"},"Intro"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The motto is: ",(0,n.kt)("strong",{parentName:"li"},"keep it simple"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"If we over-extend the explanations or the 'rules', these guidelines will be harder to read and therefore harder to follow."),(0,n.kt)("li",{parentName:"ul"},"Development guidelines can easily fall into the trap of being very opinionated and subjective. To avoid this, we aim to specify a ",(0,n.kt)("em",{parentName:"li"},"'minimum common base layer'")," for our development. If a specific team wants to add some extra concrete steps particular to their area of expertise, they are free to do so. ")))),(0,n.kt)("h2",{id:"task-management"},"Task management"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Description of the current status:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Concrete tasks are defined in ",(0,n.kt)("inlineCode",{parentName:"li"},"Github issues")),(0,n.kt)("li",{parentName:"ul"},"General tasks are defined in ",(0,n.kt)("inlineCode",{parentName:"li"},"Notion"))))),(0,n.kt)("h2",{id:"docsspecs-strategy"},"Docs/Specs strategy"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Code should be well documented (following the specific language guidelines)"),(0,n.kt)("li",{parentName:"ul"},"New features should be documented before being implemented",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Reasons:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Avoid inefficiencies due incompatibilities on the client & server sides"),(0,n.kt)("li",{parentName:"ul"},"Make it easier for the reviewer to verify that the implementation follows the spec"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Product features")," need to be well described before being implemented.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A description of ",(0,n.kt)("strong",{parentName:"li"},"why")," this change is being made is expected."),(0,n.kt)("li",{parentName:"ul"},"A clear definition of feature completion is expected."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Protocol changes")," need to be documented on a docs PR, following a discussion",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Use the Github discussions on the ",(0,n.kt)("inlineCode",{parentName:"li"},"protocol")," repo when the topic is relevant to the community"),(0,n.kt)("li",{parentName:"ul"},"Use a Notion page or a HackMD if the topic is relevant to the team only")))))),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("a",{parentName:"p",href:"https://discuss.vocdoni.io"},"discuss.vocdoni.io")," is used for discussing new features and protocol proposals.")),(0,n.kt)("h3",{id:"layers-of-documentation"},"Layers of documentation"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Tasks related to PR discussions"),": discuss the problem, possible solutions, ideas, agreements, related issues"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Commit message"),": describe what the commit adds & why"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Inline code documentation"),": describe the method & logic of the code, to help the future reader of the code"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"developer.vocdoni.io"),": document the spec & architecture. If a new protocol/feature is being added, it should appear here before the implementation starts."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Package README.md"),": update the readme according to the ",(0,n.kt)("a",{parentName:"li",href:"/development-guidelines/readme-template"},"readme template"))),(0,n.kt)("h3",{id:"readme"},"Readme"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any new repository should use the ",(0,n.kt)("a",{parentName:"li",href:"/development-guidelines/readme-template"},"readme template")," as the base for its readme file"),(0,n.kt)("li",{parentName:"ul"},"This readme file is not intended to be the source-of-truth for documentation"),(0,n.kt)("li",{parentName:"ul"},"The following types of documentation belong in the developer portal:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Autogenerated API reference"),(0,n.kt)("li",{parentName:"ul"},"Protocol/architecture design documentation"),(0,n.kt)("li",{parentName:"ul"},"Tutorials and guides for public-facing tools (eg. UI Components)"))),(0,n.kt)("li",{parentName:"ul"},"The following may belong in the repository readme file:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Prerequisites or installation instructions"),(0,n.kt)("li",{parentName:"ul"},"Tutorials for internal or experimental tools (eg ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/storage-proofs-eth-go"},"storage-proofs-eth-go"),")"),(0,n.kt)("li",{parentName:"ul"},"License information")))),(0,n.kt)("h2",{id:"testing-strategy"},"Testing strategy"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Unit"),": test the unit in full isolation from any other code part. Usually within a unique package."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Integration"),": where individual units and components are combined and tested as a group with a clear scope. Usually using multiple packages.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"example:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/vocdoni-node/tree/master/test"},"https://github.com/vocdoni/vocdoni-node/tree/master/test")))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"End-to-end"),": uses a service that is not in the repo, and performs the full flow. Can test the user behavior.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"examples:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The docker-compose test suite on vocdoni-node: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/vocdoni/vocdoni-node/tree/master/dockerfiles/testsuite"},"https://github.com/vocdoni/vocdoni-node/tree/master/dockerfiles/testsuite"))))))),(0,n.kt)("p",null,"Priority of test layers:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Add ",(0,n.kt)("strong",{parentName:"li"},"unit tests")," to the feature being added"),(0,n.kt)("li",{parentName:"ol"},"When a group of features enables a new flow, add ",(0,n.kt)("strong",{parentName:"li"},"integration test")," for that flow (which combines the features)"),(0,n.kt)("li",{parentName:"ol"},"If possible, implement the same flow from the integration test into an ",(0,n.kt)("strong",{parentName:"li"},"end-to-end test"))),(0,n.kt)("p",null,"When fixing a ",(0,n.kt)("strong",{parentName:"p"},"bug"),":"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Add the tests that make the bug appear"),(0,n.kt)("li",{parentName:"ol"},"Fix the bug"),(0,n.kt)("li",{parentName:"ol"},"Execute the test and check that the bug has been fixed\nThe idea behind this strategy is to be able prove with code that the bug is fixed by implementing a test that fails due to the bug. ")),(0,n.kt)("h3",{id:"code-reviews"},"Code reviews"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"It is the responsability of the PR creator & PR reviewers to ensure that the ",(0,n.kt)("em",{parentName:"li"},"Testing strategy")," is followed. No PR should be merged if there are missing tests for the newly added code."),(0,n.kt)("li",{parentName:"ul"},"Each repository has a list of people with enough knowledge about it to review PRs."),(0,n.kt)("li",{parentName:"ul"},"When creating a PR, PR creator needs to ",(0,n.kt)("inlineCode",{parentName:"li"},"require")," at least 1 PR reviewer",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Take in mind that the PR reviewer may be receiving lots of emails of notifications of Github, so the PR creator should decide if it's needed to send a private message to that person to notify of the PR")))),(0,n.kt)("h4",{id:"reviewing-a-pr"},"Reviewing a PR"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"When reviewing others' code, try to:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"A"),". Be very clear about the requested change, stating the issue unambiguously or suggesting a code edit."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"B"),". If the request is ambiguous, doesn't provide enough details or is a\npersonal opinion without strong arguments, state that the request is not\nblocking and let the author of the PR decide wether to make a change or not\nat their own discretion.")))),(0,n.kt)("h4",{id:"automated-code-review"},"Automated Code Review"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"PRs can be merged once:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"the tests pass"),(0,n.kt)("li",{parentName:"ul"},"the linters pass (if activated)"))),(0,n.kt)("li",{parentName:"ul"},"It's the responsability of the repo creator/owner to configure the Github Actions with the automated Tests & Linters for each commit & PR")),(0,n.kt)("h2",{id:"linters"},"Linters"),(0,n.kt)("p",null,"Most repos include a linter configuration file. For example, the ",(0,n.kt)("inlineCode",{parentName:"p"},"vocdoni-sdk")," package ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/vocdoni/vocdoni-sdk/blob/71366611184b8f7579ec0b033f40a056d49ebb94/.github/workflows/main.yml#L30"},"Github actions")," requires ",(0,n.kt)("inlineCode",{parentName:"p"},"[eslint]"),"(",(0,n.kt)("a",{parentName:"p",href:"https://github.com/vocdoni/vocdoni-sdk/blob/main/.eslintrc.cjs"},"https://github.com/vocdoni/vocdoni-sdk/blob/main/.eslintrc.cjs"),"). And new repos should include a linter file from an existing repo of that given language and require linting as one of the automated tests. "),(0,n.kt)("h2",{id:"git-branching-guidelines"},"Git branching guidelines"),(0,n.kt)("h3",{id:"branches"},"Branches"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"main")," all new developments are merged on this branch, it is the main branch"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"stage")," pre-release branch environment in some core repos"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"release-*")," for each new release there will be a release branch based on master. ",(0,n.kt)("strong",{parentName:"li"},"The highest-number release-","*"," branch is assumed to be active & deployed")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"feature/*")," development branch for a new feature (they are temporary and merged into master)"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"hotfix/*")," branch for fixing release bugs")),(0,n.kt)("h3",{id:"examples"},"Examples"),(0,n.kt)("h4",{id:"new-development"},"New development"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"A new feature branch is created from master: ",(0,n.kt)("inlineCode",{parentName:"li"},"feature/add_datalayer_swarm")),(0,n.kt)("li",{parentName:"ol"},"If the development takes some time and master has new code, rebase it (",(0,n.kt)("inlineCode",{parentName:"li"},"main"),"->",(0,n.kt)("inlineCode",{parentName:"li"},"feature/add_datalayer_swarm"),")"),(0,n.kt)("li",{parentName:"ol"},"Once the feature is finished it will be merged to master via a PR (depending on the relevance of the feature, fast-forward or merge-commit will be used)")),(0,n.kt)("h4",{id:"stage"},"Stage"),(0,n.kt)("p",null,"A stage or 'stg' branch exists on the core repositories.\nWhen a new release needs to be created, the first step is the stage (pre-release) phase.\nStage will be based on ",(0,n.kt)("inlineCode",{parentName:"p"},"main")," branch. Once testing and quality assurance has been completed, stage will be moved to ",(0,n.kt)("inlineCode",{parentName:"p"},"release-X.Y")),(0,n.kt)("h3",{id:"release-creation"},"Release creation"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"A new release branch is created from stage, such as release-0.1"),(0,n.kt)("li",{parentName:"ol"},"The release branch will receive changes which are only required by the specific release and hotfixes"),(0,n.kt)("li",{parentName:"ol"},"Once the release is ready to be published, a new tag is created: v0.1.0")),(0,n.kt)("h3",{id:"release-hotfix"},"Release hotfix"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"If a relevant bug is found, a new hotfix branch is created, based on the last release: ",(0,n.kt)("inlineCode",{parentName:"li"},"hotfix/data_race_swarm")),(0,n.kt)("li",{parentName:"ol"},"Once the hotfix is done, it is merged to the release-0.1 branch. The hotfix might be cherry-picked from master"),(0,n.kt)("li",{parentName:"ol"},"A new tag is created: v0.1.1"),(0,n.kt)("li",{parentName:"ol"},"Meanwhile the master branch keeps being updated on its own")),(0,n.kt)("h2",{id:"other-considerations"},"Other considerations"),(0,n.kt)("p",null,"Make commits atomic. Usually 1 commit per modification (do not worry about creating multiple commits):"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Wrong: 1)",(0,n.kt)("inlineCode",{parentName:"li"},"add datalayer and other modifications")),(0,n.kt)("li",{parentName:"ul"},"Correct: 1)",(0,n.kt)("inlineCode",{parentName:"li"},"add new datalayer swarm")," 2)",(0,n.kt)("inlineCode",{parentName:"li"},"swarm datalayer API integration")," 3)",(0,n.kt)("inlineCode",{parentName:"li"},"extend README with swarm datalayer information")," 4)",(0,n.kt)("inlineCode",{parentName:"li"},"add comments to swarm datalayer"))),(0,n.kt)("p",null,"Use fast-forward for small merges such as 1 or 2 commits. Use merge-commit when merging features or bugfixes with several commits."),(0,n.kt)("p",null,"Exception: before merging, if the commit history is messy or dirty, squash the commits and add a single large commit listing all modifications."))}u.isMDXComponent=!0}}]);