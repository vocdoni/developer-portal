openapi: 3.0.0
info:
  contact: {}
  description: "The Vocdoni API is a REST API that substitutes the previous RPCs in order to make it easier for \ndevelopers/integrators to build on top of the voting protocol. This API facilitates creating votings using Vocdoni, \nwithout the hassle of learning a complex blockchain platform, allowing to perform all the features that enable the \nvoting protocol such as creating an account, entity, voting process, census & vote, abstracting as much as possible \nthe complexity and offering simple and straightforward methods to perform those actions. \n\nYou can review the API endpoints documentation in this section, the main entities are:\n\n- [**Chain**](chain): The Vocdoni blockchain is named Vochain. It is a Byzantine fault-tolerant network based on Tendermint that \nexecutes the Vocdoni Protocol logic represented as a state machine. Its main purpose is to register votes in a \ndecentralized and verifiable format. In those endpoints, you can consult the state of the chain, transactions costs, \nlist organizations and get more Vochain info.\n\n- [**Accounts**](accounts): Identified by an Ethereum like address. An account can create and manage elections, transfer tokens, \ngive power to other accounts on his behalf (delegates) and manage its metadata.\n\n- [**Elections**](elections): Is a rule-set of options and requirements for creating a process in which people vote a series of \noptions. To know more about the params of an election and its lifecycle go [here](../get-started/intro#23-elections). \nIn this section you will find all information related to an election as its information, election keys, submitted \nvotes & how to create a new election.\n\n- [**Censuses**](censuses): The census is a key component of any voting process. It specifies the set of users (identified by a \npublic key or address) eligible for participating in an election. To understand more about the Censuses you can \ncheck [here](../get-started/intro#21-the-census). Here you will be able to get censuses information like the Merkle \nroot, total weight & size, import/export the censuses and create new ones.\n\n- [**Votes**](votes): All the information related to the vote issued by a participant in a vote, you can check the validity of \nthe vote, consult your information and send a vote.\n\n\nBackend error messages list are defined here: https://github.com/vocdoni/vocdoni-node/blob/master/api/errors.go"
  title: Vocdoni API
  version: 2.0.0
servers:
  - url: 'https:/api-dev.vocdoni.net/v2/'
paths:
  /accounts:
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.AccountSet'
          description: OK
      description: Set account information
      summary: Set account
  /accounts/treasurer:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
          description: OK
      description: Get treasurer address
      summary: Get treasurer address
  '/accounts/{accountID}/transfers/page/{page}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
          description: OK
      description: Returns the token transfers for an organization
      summary: Token transfers list
  '/accounts/{address}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Account'
          description: OK
      description: Get account information
      summary: Get account
  '/accounts/{organizationID}/elections/count':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
          description: OK
      description: Returns the number of elections for an organization
      summary: Elections count
  '/accounts/{organizationID}/elections/page/{page}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Organization'
          description: OK
      description: List the elections of an organization
      summary: Elections list
  '/accounts/{organizationID}/elections/status/{status}/page/{page}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Organization'
          description: OK
      description: List the elections of an organization
      summary: Elections list
  '/censuses/{censusID}':
    delete:
      responses:
        '200':
          description: (empty body)
      description: TODO
      summary: TODO
  '/censuses/{censusID}/export':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/censusdb.CensusDump'
          description: OK
      description: TODO
      summary: TODO
  '/censuses/{censusID}/import':
    post:
      responses:
        '200':
          description: (empty body)
      description: TODO
      summary: TODO
  '/censuses/{censusID}/participants':
    post:
      responses:
        '200':
          description: (empty body)
      description: Adds one or multiple key/weights to the census
      summary: Add participants to census
  '/censuses/{censusID}/proof/{key}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Census'
          description: OK
      description: TODO
      summary: TODO
  '/censuses/{censusID}/publish':
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Census'
          description: OK
      description: TODO
      summary: TODO
  '/censuses/{censusID}/publish/{root}':
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Census'
          description: OK
      description: TODO
      summary: TODO
  '/censuses/{censusID}/root':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Census'
          description: OK
      description: TODO
      summary: TODO
  '/censuses/{censusID}/size':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Census'
          description: OK
      description: TODO
      summary: TODO
  '/censuses/{censusID}/type':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Census'
          description: OK
      description: TODO
      summary: TODO
  '/censuses/{censusID}/verify':
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Census'
          description: OK
      description: TODO
      summary: TODO
  '/censuses/{censusID}/weight':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Census'
          description: OK
      description: TODO
      summary: TODO
  '/censuses/{type}':
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Census'
          description: OK
      description: Create a new census
      summary: Create a new census
  '/chain/blockToDate/{height}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
          description: OK
      description: Returns the estimated timestamp for the block height provided
      summary: Estimate timestamp for block
  '/chain/blocks/hash/{hash}':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
      tags:
        - Chain
      description: Returns the block from the given hash
      summary: Get block (by hash)
  '/chain/blocks/{height}':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
      tags:
        - Chain
      description: Returns the block at the given height
      summary: Get block (by height)
  '/chain/blocks/{height}/transactions/page/{page}':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/api.TransactionMetadata'
                type: array
          description: OK
      tags:
        - Chain
      description: Given a block returns the list of transactions for that block
      summary: Returns the list of transactions for a given block
  '/chain/dateToBlock/{timestamp}':
    get:
      parameters:
        - description: Timestamp on unix format
          in: path
          name: timestamp
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  height:
                    type: number
                type: object
          description: Estimated block height
      tags:
        - Chain
      description: Returns the estimated block height for the timestamp provided
      summary: Estimate block for timestamp
  /chain/info:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.ChainInfo'
          description: OK
      tags:
        - Chain
      description: "Return basic Vocdoni Blockchain (Vochain) information like blockTime, chainId, current height...\n\n`blockTime`: each array position return average time for 1 minute, 10 minutes, 1 hour, 6 hours and 24 hours.\n\n`blockTime`: every array position represents the average for 1 minute, 10m, 1h, 6h, 24h\n\n`MaxCensusSize`: is a new feature introduced in the blockchain that is used to limit the number of \nvotes that can be registered for an election. This feature helps to prevent any potential overflow of the \nblockchain when the number of votes goes beyond the maximum limit. This is the maximum value \nthat an election creation can allow.\n\nIn order to create an election, the creator is required to set the `MaxCensusSize` parameter to a proper value. \nTypically, this value should be equal to the size of the census. If the MaxCensusSize parameter is set to 0, an \nerror will occur and the election cannot be created.\n\nThe `MaxCensusSize` parameter determines the maximum number of votes that can be registered by the blockchain. \nIf the number of votes exceeds this limit, the vote transaction will fail (overwrite votes does not count).\n\nSee `MaxCensusSize` attribute on the VocdoniSDK  to add the maximum census size to a single election. Will \nthrow an error if is superior than the allowed on the Vochain: `Max census size for the election is greater \nthan allowed size`.\n\n`networkCapacity`  indicates how many votes per block is the blockchain supposed to achieve. As bigger the \ncapacity as cheaper the elections."
      summary: Vochain information
  /chain/info/circuit:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/circuit.ZkCircuitConfig'
          description: OK
      tags:
        - Chain
      description: Returns the circuit configuration according to the current circuit
      summary: Circuit info
  /chain/info/electionPriceFactors:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/electionprice.Calculator'
          description: OK
      tags:
        - Chain
      description: >-
        Package electionprice provides a mechanism for calculating the price of an election based on its characteristics.


        The formula used to calculate the price for creating an election on the Vocdoni blockchain is designed to take into

        account various factors that impact the cost and complexity of conducting an election. The price is determined by

        combining several components, each reflecting a specific aspect of the election process.


        1. Base Price: This is a fixed cost that serves as a starting point for the price calculation. It represents the

        minimal price for creating an election, regardless of its size or duration.


        2. Size Price: As the number of voters (maxCensusSize) in an election increases, the resources required to manage

        the election also grow. To account for this, the size price component is directly proportional to the maximum number

        of votes allowed in the election. Additionally, it takes into consideration the blockchain's maximum capacity

        (capacity) and the maximum capacity the blockchain administrators can set (maxCapacity). This ensures that the price

        is adjusted based on the current capacity of the blockchain.


        3. Duration Price: The length of the election (electionDuration) also affects the price, as longer elections occupy

        more resources over time. The duration price component is directly proportional to the election duration and

        inversely proportional to the maximum number of votes. This means that if the election lasts longer, the price

        increases, and if there are more votes in a shorter time, the price also increases to reflect the higher demand for

        resources.


        4. Encrypted Votes: If an election requires encryption for maintaining secrecy until the end (encryptedVotes), it

        demands additional resources and computational effort. Therefore, the encrypted price component is added to the total

        price when this feature is enabled.


        5. Anonymous Votes: Similarly, if an election must be anonymous (anonymousVotes), it requires additional measures to

        ensure voter privacy. As a result, the anonymous price component is added to the total price when this option is

        chosen.


        6. Overwrite Price: Allowing voters to overwrite their votes (maxVoteOverwrite) can increase the complexity of

        managing the election, as it requires additional resources to handle vote updates. The overwrite price component

        accounts for this by being proportional to the maximum number of vote overwrites and the maximum number of votes

        allowed in the election. It also takes into account the blockchain's capacity to ensure the price reflects the

        current resource constraints.


        The constant factors in the price formula play a crucial role in determining the price of an election based on its

        characteristics. Each factor is associated with a specific component of the price formula and helps to weigh the

        importance of that component in the final price calculation. The rationale behind these constant factors is to

        provide a flexible mechanism to adjust the pricing model based on the system's needs and requirements.


        - k1 (Size price factor): This constant factor affects the size price component of the formula. By adjusting k1,

        you can control the impact of the maximum number of votes (maxCensusSize) on the overall price. A higher k1 value

        would make the price increase more rapidly as the election size grows, while a lower k1 value would make the price

        less sensitive to the election size. The rationale behind k1 is to ensure that the pricing model can be adapted to

        accommodate different election sizes while considering the resource requirements.


        - k2 (Duration price factor): This constant factor influences the duration price component of the formula. By

        adjusting k2, you can control how the duration of the election (electionDuration) affects the price. A higher k2

        value would make the price increase more quickly as the election duration extends, while a lower k2 value would make

        the price less sensitive to the election duration. The rationale behind k2 is to reflect the resource consumption

        over time and ensure that longer elections are priced accordingly.


        - k3 (Encrypted price factor): This constant factor affects the encrypted price component of the formula. By adjusting

        k3, you can control the additional cost associated with encrypted elections (encryptedVotes). A higher k3 value would

        make the price increase more significantly for elections that require encryption, while a lower k3 value would make

        the price less sensitive to the encryption requirement. The rationale behind k3 is to account for the extra

        computational effort and resources needed to ensure secrecy in encrypted elections.


        - k4 (Anonymous price factor): This constant factor influences the anonymous price component of the formula. By

        adjusting k4, you can control the additional cost associated with anonymous elections (anonymousVotes). A higher k4

        value would make the price increase more significantly for elections that require anonymity, while a lower k4 value

        would make the price less sensitive to the anonymity requirement. The rationale behind k4 is to account for the extra

        measures and resources needed to ensure voter privacy in anonymous elections.


        - k5 (Overwrite price factor): This constant factor affects the overwrite price component of the formula. By adjusting

        k5, you can control the additional cost associated with allowing vote overwrites (maxVoteOverwrite). A higher k5

        value would make the price increase more significantly for elections that permit vote overwrites, while a lower k5

        value would make the price less sensitive to the overwrite allowance. The rationale behind k5 is to account for the

        increased complexity and resources needed to manage vote overwrites in the election process.


        - k6 (Non-linear growth factor): This constant factor determines the rate of price growth for elections with a maximum

        number of votes (maxCensusSize) exceeding the k7 threshold. By adjusting k6, you can control the non-linear growth

        rate of the price for larger elections. A higher k6 value would result in a more rapid increase in the price as the

        election size grows beyond the k7 threshold, while a lower k6 value would result in a slower increase in the price

        for larger elections. The rationale behind k6 is to provide a mechanism for controlling the pricing model's

        sensitivity to large elections. This factor ensures that the price accurately reflects the increased complexity,

        resource consumption, and management effort associated with larger elections, while maintaining a more affordable

        price for smaller elections. By fine-tuning k6, the pricing model can be adapted to balance accessibility for smaller

        elections with the need to cover costs and resource requirements for larger elections.


        - k7 (Size non-linear trigger): This constant factor represents a threshold value for the maximum number of

        votes (maxCensusSize) in an election. When the election size exceeds k7, the price growth becomes non-linear,

        increasing more rapidly beyond this point. The rationale behind k7 is to create a pricing model that accommodates

        a "freemium" approach, where smaller elections (under the k7 threshold) are priced affordably, while larger elections

        are priced more significantly due to their increased resource requirements and complexity. By adjusting k7, you can

        control the point at which the price transition from linear to non-linear growth occurs. A higher k7 value would

        allow for more affordable pricing for a larger range of election sizes, while a lower k7 value would result in more

        rapid price increases for smaller election sizes. This flexibility enables the pricing model to be tailored to the

        specific needs and goals of the Vocdoni blockchain, ensuring that small elections remain accessible and affordable,

        while larger elections are priced to reflect their higher resource demands.
      summary: Election price factors info
  /chain/organizations/count:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    type: integer
                type: object
          description: Number of registered organizations
      tags:
        - Chain
      description: Return the number of organizations
      summary: Count organizations
  '/chain/organizations/filter/page/{page}':
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
      tags:
        - Chain
      description: Returns a list of organizations paginated by the given page
      summary: Organizations list (paginated)
  '/chain/organizations/page/{page}':
    get:
      parameters:
        - description: Define de page number
          in: path
          name: page
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.organizationListHandler.response'
          description: OK
      tags:
        - Chain
      description: "An **Organizations** is an account with `infoUri` that contains organization associated  metadata. \nAn **Account** instead could be a validator, an oracle, a voter or just someone who wants to transfer tokens. \n\nThe `/chain/organizations` endpoints are related only to the Organization account type.\n\n- Return list of organizations ids.\n- If no page is defined, will assume page 0."
      summary: List organizations
  /chain/transactions:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.Transaction'
          description: >-
            Return blockchain response. `response` could differ depending of transaction type.
      tags:
        - Chain
      description: "It submit a transaction. Depending of transaction type will return different kinds of responses:\n- For a NewElection transaction, `response` will be the `newElectionId`\n- For a Vote transaction, `response` will be the `voteID`\n\nOnce the transaction is mined on the Vochain you can use \n[`chain/transactions/reference/{hash}`](transaction-by-reference) to find the block height and its index on the \nblock to get the transaction index using [`chain/transactions/{blockHeight}/{txIndex}`](transaction-by-block-index).\n"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                payload:
                  type: string
              type: object
        description: Base64 payload string containing transaction data and signature
        required: true
      summary: Submit transaction
  /chain/transactions/cost:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genesis.TransactionCosts'
          description: OK
      tags:
        - Chain
      description: Returns the list of transactions and its cost
      summary: Transaction costs
  /chain/transactions/count:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: integer
          description: OK
      tags:
        - Chain
      description: Returns the number of transactions
      summary: Transactions count
  '/chain/transactions/page/{page}':
    get:
      parameters:
        - description: Define de page number
          in: path
          name: page
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.chainTxListPaginated.response'
          description: It return a list of transactions references
      tags:
        - Chain
      description: >-
        To get full transaction information use  [/chain/transaction/{blockHeight}/{txIndex}](transaction-by-block-index).\nWhere transactionIndex is the index of the transaction on the containing block.
      summary: List Transactions
  '/chain/transactions/reference/index/{index}':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexertypes.Transaction'
          description: OK
      tags:
        - Chain
      description: TODO
      summary: TODO
  '/chain/transactions/reference/{hash}':
    get:
      parameters:
        - description: Transaction hash
          in: path
          name: hash
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexertypes.Transaction'
          description: OK
      tags:
        - Chain
      description: >-
        Using transaction hash it return the `block` and `index` containing that contains the transaction. After, you could use this `block` and `index` to retrieve transaction full info using [transaction by block and index](transaction-by-block-index)
      summary: Transaction by hash
  '/chain/transactions/{height}/{index}':
    get:
      parameters:
        - description: Block height
          in: path
          name: height
          required: true
          schema:
            type: integer
        - description: Transaction index on block
          in: path
          name: index
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.GenericTransactionWithInfo'
          description: OK
      tags:
        - Chain
      description: >-
        Get transaction full information by block height and index. It returns JSON transaction protobuff encoded. Depending of transaction type will return different types of objects. Current transaction types can be found calling `/chain/transactions/cost`
      summary: Transaction by block height and index
  /chain/validators:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.ValidatorList'
          description: OK
      tags:
        - Chain
      description: Returns the list of validators
      summary: Validators list
  /elections:
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.ElectionCreate'
          description: OK
      description: Creates a new election
      summary: Create election
  '/elections/filter/page/{page}':
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
          description: OK
      description: >-
        Returns a paginated list of elections filtered by partial organizationID, partial processID,
      summary: 'Election list (filtered, paginated)'
  '/elections/page/{page}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
          description: OK
      description: TODO
      summary: TODO
  /elections/price:
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
          description: OK
      description: Helper endpoint to get the election price.
      summary: Compute election price
  '/elections/{electionID}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Election'
          description: OK
      description: Get election information
      summary: Get election information
  '/elections/{electionID}/keys':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.ElectionKeys'
          description: OK
      description: Returns the list of public/private encryption keys
      summary: List encryption keys
  '/elections/{electionID}/scrutiny':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.ElectionResults'
          description: OK
      description: Returns the consensus results of an election
      summary: Election results
  '/elections/{electionID}/votes/count':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
          description: OK
      description: Get the number of votes for an election
      summary: Get vote count
  '/elections/{electionID}/votes/page/{page}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
          description: OK
      description: Returns the list of voteIDs for an election (paginated)
      summary: List election votes
  /files/cid:
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.File'
          description: OK
      description: Helper endpoint to get the IPFS CIDv1 hash of a file
      summary: Compute IPFS CIDv1 of file
  /votes:
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Vote'
          description: OK
      description: Submit a vote
      summary: Submit a vote
  '/votes/verify/{electionID}/{voteID}':
    get:
      responses:
        '200':
          description: (empty body)
      description: Verify a vote (get basic information)
      summary: Verify vote
  '/votes/{voteID}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Vote'
          description: OK
      description: Get a vote by its voteID (nullifier)
      summary: Get vote (by voteID)
  '/wallet/add/{privateKey}':
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Account'
          description: OK
      description: Add a new account to the local store
      summary: Add account
  /wallet/bootstrap:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Transaction'
          description: OK
      description: Set a new account
      summary: Set account
  /wallet/election:
    post:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Transaction'
          description: OK
      description: Creates an election
      summary: Create election
  '/wallet/transfer/{dstAddress}/{amount}':
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/api.Transaction'
          description: OK
      description: Transfer balance to another account
      summary: Transfer tokens
components:
  schemas:
    api.Account:
      properties:
        address:
          items:
            type: integer
          type: array
        balance:
          type: integer
        electionIndex:
          type: integer
        infoURL:
          type: string
        metadata:
          $ref: '#/components/schemas/api.AccountMetadata'
        nonce:
          type: integer
        token:
          type: string
      type: object
    api.AccountMedia:
      properties:
        avatar:
          type: string
        header:
          type: string
        logo:
          type: string
      type: object
    api.AccountMetadata:
      properties:
        actions: {}
        description:
          $ref: '#/components/schemas/api.LanguageString'
        languages:
          items:
            type: string
          type: array
        media:
          $ref: '#/components/schemas/api.AccountMedia'
        meta: {}
        name:
          $ref: '#/components/schemas/api.LanguageString'
        newsFeed:
          $ref: '#/components/schemas/api.LanguageString'
        version:
          type: string
      type: object
    api.AccountSet:
      properties:
        metadata:
          items:
            type: integer
          type: array
        metadataURL:
          type: string
        txHash:
          items:
            type: integer
          type: array
        txPayload:
          items:
            type: integer
          type: array
      type: object
    api.Census:
      properties:
        censusID:
          items:
            type: integer
          type: array
        key:
          items:
            type: integer
          type: array
        proof:
          items:
            type: integer
          type: array
        root:
          items:
            type: integer
          type: array
        siblings:
          items:
            type: string
          type: array
        size:
          type: integer
        type:
          type: string
        uri:
          type: string
        valid:
          type: boolean
        value:
          items:
            type: integer
          type: array
        weight:
          $ref: '#/components/schemas/types.BigInt'
      type: object
    api.ChainInfo:
      properties:
        blockTime:
          example:
            - 12000
            - 11580
            - 11000
            - 11100
            - 11100
          items:
            type: integer
          type: array
        blockTimestamp:
          example: '2022-11-17T18:00:57.379551614Z'
          format: date-time
          type: string
        chainId:
          example: azeno
          type: string
        cicuitConfigurationTag:
          example: dev
          type: string
        electionCount:
          example: 120
          type: integer
        genesisTime:
          example: '2022-11-17T18:00:57.379551614Z'
          format: date-time
          type: string
        height:
          example: 5467
          type: integer
        maxCensusSize:
          example: 50000
          type: integer
        networkCapacity:
          example: 2000
          type: integer
        organizationCount:
          example: 20
          type: integer
        syncing:
          example: true
          type: boolean
        transactionCount:
          example: 554
          type: integer
        validatorCount:
          example: 5
          type: integer
        voteCount:
          example: 432
          type: integer
      type: object
    api.ChoiceMetadata:
      properties:
        title:
          $ref: '#/components/schemas/api.LanguageString'
        value:
          type: integer
      type: object
    api.Election:
      properties:
        census:
          $ref: '#/components/schemas/api.ElectionCensus'
        creationTime:
          type: string
        electionId:
          items:
            type: integer
          type: array
        electionMode:
          $ref: '#/components/schemas/api.ElectionMode'
        endDate:
          type: string
        finalResults:
          type: boolean
        metadata:
          $ref: '#/components/schemas/api.ElectionMetadata'
        metadataURL:
          type: string
        organizationId:
          items:
            type: integer
          type: array
        result:
          items:
            items:
              $ref: '#/components/schemas/types.BigInt'
            type: array
          type: array
        startDate:
          type: string
        status:
          type: string
        tallyMode:
          $ref: '#/components/schemas/api.TallyMode'
        voteCount:
          type: integer
        voteMode:
          $ref: '#/components/schemas/api.VoteMode'
      type: object
    api.ElectionCensus:
      properties:
        censusOrigin:
          type: string
        censusRoot:
          items:
            type: integer
          type: array
        censusURL:
          type: string
        maxCensusSize:
          type: integer
        postRegisterCensusRoot:
          items:
            type: integer
          type: array
      type: object
    api.ElectionCreate:
      properties:
        electionID:
          items:
            type: integer
          type: array
        metadata:
          items:
            type: integer
          type: array
        metadataURL:
          type: string
        txHash:
          items:
            type: integer
          type: array
        txPayload:
          items:
            type: integer
          type: array
      type: object
    api.ElectionKeys:
      properties:
        privateKeys:
          items:
            $ref: '#/components/schemas/api.Key'
          type: array
        publicKeys:
          items:
            $ref: '#/components/schemas/api.Key'
          type: array
      type: object
    api.ElectionMetadata:
      properties:
        description:
          $ref: '#/components/schemas/api.LanguageString'
        media:
          $ref: '#/components/schemas/api.ProcessMedia'
        meta: {}
        questions:
          items:
            $ref: '#/components/schemas/api.Question'
          type: array
        results:
          $ref: '#/components/schemas/api.ElectionResultsDetails'
        title:
          $ref: '#/components/schemas/api.LanguageString'
        version:
          type: string
      type: object
    api.ElectionMode:
      properties:
        autoStart:
          type: boolean
        dynamicCensus:
          type: boolean
        encryptedMetaData:
          type: boolean
        interruptible:
          type: boolean
        preRegister:
          type: boolean
      type: object
    api.ElectionResults:
      properties:
        abiEncoded:
          description: ABIEncoded is the abi encoded election results
          type: string
        censusRoot:
          description: CensusRoot is the root of the census tree
          items:
            type: integer
          type: array
        electionId:
          description: ElectionID is the ID of the election
          items:
            type: integer
          type: array
        organizationId:
          description: >-
            OrganizationID is the ID of the organization that created the election
          items:
            type: integer
          type: array
        results:
          description: Results is the list of votes
          items:
            items:
              $ref: '#/components/schemas/types.BigInt'
            type: array
          type: array
        sourceContractAddress:
          description: >-
            SourceContractAddress is the address of the smart contract containing the census
          items:
            type: integer
          type: array
      type: object
    api.ElectionResultsDetails:
      properties:
        aggregation:
          type: string
        display:
          type: string
      type: object
    api.ElectionSummary:
      properties:
        electionId:
          items:
            type: integer
          type: array
        endDate:
          type: string
        finalResults:
          type: boolean
        organizationId:
          items:
            type: integer
          type: array
        result:
          items:
            items:
              $ref: '#/components/schemas/types.BigInt'
            type: array
          type: array
        startDate:
          type: string
        status:
          type: string
        voteCount:
          type: integer
      type: object
    api.File:
      properties:
        cid:
          type: string
        payload:
          items:
            type: integer
          type: array
      type: object
    api.GenericTransactionWithInfo:
      properties:
        tx:
          oneOf:
            - $ref: "#/components/schemas/models.Tx_Vote"
        txInfo:
          $ref: '#/components/schemas/indexertypes.Transaction'
      type: object
    api.Key:
      properties:
        index:
          type: integer
        key:
          items:
            type: integer
          type: array
      type: object
    api.LanguageString:
      additionalProperties:
        type: string
      type: object
    api.Organization:
      properties:
        count:
          example: 1
          type: integer
        elections:
          items:
            $ref: '#/components/schemas/api.ElectionSummary'
          type: array
        organizationID:
          items:
            type: integer
          type: array
        organizations:
          items:
            $ref: '#/components/schemas/api.OrganizationList'
          type: array
      type: object
    api.OrganizationList:
      properties:
        electionCount:
          example: 1
          type: integer
        organizationID:
          example: 3.1407138843303053e+47
          type: string
      type: object
    api.ProcessMedia:
      properties:
        header:
          type: string
        streamUri:
          type: string
      type: object
    api.Question:
      properties:
        choices:
          items:
            $ref: '#/components/schemas/api.ChoiceMetadata'
          type: array
        description:
          $ref: '#/components/schemas/api.LanguageString'
        title:
          $ref: '#/components/schemas/api.LanguageString'
      type: object
    api.TallyMode:
      properties:
        costExponent:
          type: integer
        maxCount:
          type: integer
        maxTotalCost:
          type: integer
        maxValue:
          type: integer
        maxVoteOverwrites:
          type: integer
      type: object
    api.Transaction:
      properties:
        code:
          type: integer
          x-omitempty: true
        hash:
          items:
            type: integer
          type: array
          x-omitempty: true
        response:
          format: base64
          type: string
          x-omitempty: true
      type: object
    api.TransactionMetadata:
      properties:
        transactionHash:
          items:
            type: integer
          type: array
        transactionIndex:
          type: integer
        transactionNumber:
          type: integer
        transactionType:
          type: string
      type: object
    api.Validator:
      properties:
        address:
          items:
            type: integer
          type: array
        name:
          type: string
        power:
          type: integer
        pubKey:
          items:
            type: integer
          type: array
      type: object
    api.ValidatorList:
      properties:
        validators:
          items:
            $ref: '#/components/schemas/api.Validator'
          type: array
      type: object
    api.Vote:
      properties:
        blockHeight:
          type: integer
        date:
          type: string
        electionID:
          items:
            type: integer
          type: array
        encryptionKeys:
          items:
            type: integer
          type: array
        number:
          type: integer
        overwriteCount:
          type: integer
        package:
          type: string
        transactionIndex:
          type: integer
        txHash:
          items:
            type: integer
          type: array
        txPayload:
          items:
            type: integer
          type: array
        voteID:
          items:
            type: integer
          type: array
        voterID:
          items:
            type: integer
          type: array
        weight:
          type: string
      type: object
    api.VoteMode:
      properties:
        anonymous:
          type: boolean
        costFromWeight:
          type: boolean
        encryptedVotes:
          type: boolean
        serial:
          type: boolean
        uniqueValues:
          type: boolean
      type: object
    api.chainTxListPaginated.response:
      properties:
        transactions:
          items:
            $ref: '#/components/schemas/indexertypes.Transaction'
          type: array
      type: object
    api.organizationListHandler.response:
      properties:
        organizations:
          items:
            $ref: '#/components/schemas/api.OrganizationList'
          type: array
      type: object
    censusdb.CensusDump:
      properties:
        data:
          items:
            type: integer
          type: array
        maxLevels:
          description: >-
            MaxLevels is required to load the census with the original size because

            it could be different according to the election (and census) type.
          type: integer
        rootHash:
          items:
            type: integer
          type: array
        type:
          $ref: '#/components/schemas/models.Census_Type'
      type: object
    circuit.ZkCircuitConfig:
      properties:
        circuitPath:
          description: |-
            CircuitPath defines the path from where the files are downloaded.
            Locally, they will be cached inside circuit.BaseDir path,
            under that directory it will follow the CircuitPath dir structure
          type: string
        levels:
          description: >-
            Levels refers the number of levels that the merkle tree associated to the

            current circuit configuration artifacts has
          type: integer
        uri:
          description: URI defines the URI from where to download the files
          type: string
        vKeyFilename:
          description: |-
            FilenameVerificationKey defines the name of the file of the circom
            VerificationKey
          type: string
        vKeyHash:
          description: >-
            VerificationKeyHash contains the expected hash for the file filenameVK
          items:
            type: integer
          type: array
        wasmFilename:
          description: >-
            FilenameWasm defines the name of the file of the circuit wasm compiled

            version
          type: string
        wasmHash:
          description: WasmHash contains the expected hash for the file filenameWasm
          items:
            type: integer
          type: array
        zKeyFilename:
          description: >-
            FilenameProvingKey defines the name of the file of the circom ProvingKey
          type: string
        zKeyHash:
          description: ProvingKeyHash contains the expected hash for the file filenameZKey
          items:
            type: integer
          type: array
      type: object
    electionprice.Calculator:
      properties:
        basePrice:
          description: base price for an election
          example: 5
          type: integer
        capacity:
          description: capacity of the blockchain
          example: 2000
          type: integer
        factors:
          allOf:
            - $ref: '#/components/schemas/electionprice.Factors'
          description: factors affecting the price
      type: object
    electionprice.Factors:
      properties:
        k1:
          description: sizePriceFactor
          example: 0.002
          type: number
        k2:
          description: durationPriceFactor
          example: 0.0005
          type: number
        k3:
          description: encryptedPriceFactor
          example: 0.005
          type: number
        k4:
          description: anonymousPriceFactor
          example: 10
          type: number
        k5:
          description: overwritePriceFactor
          example: 3
          type: number
        k6:
          description: Size scaling factor for maxCensusSize
          example: 0.0008
          type: number
        k7:
          description: Threshold for maxCensusSize scaling
          example: 200
          type: integer
      type: object
    genesis.TransactionCosts:
      properties:
        Tx_AddDelegateForAccount:
          type: integer
        Tx_CollectFaucet:
          type: integer
        Tx_CreateAccount:
          type: integer
        Tx_DelDelegateForAccount:
          type: integer
        Tx_NewProcess:
          type: integer
        Tx_RegisterKey:
          type: integer
        Tx_SendTokens:
          type: integer
        Tx_SetAccountInfoURI:
          type: integer
        Tx_SetProcessCensus:
          type: integer
        Tx_SetProcessQuestionIndex:
          type: integer
        Tx_SetProcessResults:
          type: integer
        Tx_SetProcessStatus:
          type: integer
      type: object
    indexertypes.Transaction:
      properties:
        blockHeight:
          example: 64924
          format: int32
          type: integer
        transactionHash:
          example: 75e8f822f5dd13973ac5158d600f0a2a5fea4bfefce9712ab5195bf17884cfad
          type: string
        transactionIndex:
          example: 0
          format: int32
          type: integer
        transactionNumber:
          example: 944
          format: int64
          type: integer
        transactionType:
          enum:
            - vote
            - newProcess
            - admin
            - setProcess
            - registerKey
            - mintTokens
            - sendTokens
            - setTransactionCosts
            - setAccount
            - collectFaucet
            - setKeykeeper
          example: Vote
          type: string
      type: object
    models.CensusOrigin:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 11
        - 12
        - 13
        - 14
        - 15
      type: integer
      x-enum-varnames:
        - CensusOrigin_CENSUS_UNKNOWN
        - CensusOrigin_OFF_CHAIN_TREE
        - CensusOrigin_OFF_CHAIN_TREE_WEIGHTED
        - CensusOrigin_OFF_CHAIN_CA
        - CensusOrigin_ERC20
        - CensusOrigin_ERC721
        - CensusOrigin_ERC1155
        - CensusOrigin_ERC777
        - CensusOrigin_MINI_ME
    models.Census_Type:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 1001
        - 1002
      type: integer
      x-enum-varnames:
        - Census_UNKNOWN
        - Census_ARBO_BLAKE2B
        - Census_ARBO_POSEIDON
        - Census_ETHEREUMSTORAGE
        - Census_ETHEREUMACCOUNT
        - Census_CA
        - Census_GRAVITON
        - Census_IDEN3
    models.EnvelopeType:
      properties:
        anonymous:
          type: boolean
        costFromWeight:
          type: boolean
        encryptedVotes:
          type: boolean
        serial:
          type: boolean
        uniqueValues:
          type: boolean
      type: object
    models.NewProcessTx:
      properties:
        nonce:
          type: integer
        process:
          $ref: '#/components/schemas/models.Process'
        txtype:
          $ref: '#/components/schemas/models.TxType'
      type: object
    models.Process:
      properties:
        blockCount:
          description: >-
            BlockCount represents the amount of tendermint blocks that the process will last
          type: integer
        censusOrigin:
          $ref: '#/components/schemas/models.CensusOrigin'
        censusRoot:
          description: CensusRoot merkle root of all the census in the process
          items:
            type: integer
          type: array
        censusURI:
          description: CensusURI where to find the census
          type: string
        encryptionPrivateKeys:
          description: EncryptionPrivateKeys are the keys required to decrypt the votes
          items:
            type: string
          type: array
        encryptionPublicKeys:
          description: EncryptionPublicKeys are the keys required to encrypt the votes
          items:
            type: string
          type: array
        entityId:
          description: EntityId identifies unequivocally an entity
          items:
            type: integer
          type: array
        envelopeType:
          $ref: '#/components/schemas/models.EnvelopeType'
        ethIndexSlot:
          type: integer
        keyIndex:
          type: integer
        maxCensusSize:
          description: >-
            MaxCensusSize is set by the Process creator, indicates the maximum number of votes that will be allowed.
          type: integer
        metadata:
          description: >-
            Metadata is the content hashed URI of the JSON meta data (See Data Origins)
          type: string
        mode:
          $ref: '#/components/schemas/models.ProcessMode'
        namespace:
          type: integer
        nullifiersRoot:
          description: |-
            NullifiersRoot is the root of the pre-census nullifiers merkle tree.
            Used when Mode.PreRegister = true.
          items:
            type: integer
          type: array
        owner:
          description: >-
            Owner is the creator of a process (if any) otherwise is assumed the creator is the entityId
          items:
            type: integer
          type: array
        paramsSignature:
          items:
            type: integer
          type: array
        processId:
          items:
            type: integer
          type: array
        questionCount:
          type: integer
        questionIndex:
          type: integer
        results:
          $ref: '#/components/schemas/models.ProcessResult'
        rollingCensusRoot:
          description: |-
            RollingCensusRoot merkle root of the rolling census.  Set by the
            vocdoni-node when Mode.Process = true
          items:
            type: integer
          type: array
        rollingCensusSize:
          description: |-
            RollingCensusSize is set by the vocdoni-node when Mode.PreRegister =
            true and the StartBlock has been reached.
          type: integer
        sourceBlockHeight:
          description: >-
            SourceBlockHeight is the block height of the origin blockchain (if any)
          type: integer
        sourceNetworkContractAddr:
          description: >-
            sourceNetworkContractAddr is used for EVM token based voting and it is

            the contract address of the token that is going to define the census
          items:
            type: integer
          type: array
        sourceNetworkId:
          allOf:
            - $ref: '#/components/schemas/models.SourceNetworkId'
          description: >-
            SourceNetworkId is the identifier of the network origin (where the process have been created)
        startBlock:
          description: >-
            StartBlock represents the tendermint block where the process goes from scheduled to active
          type: integer
        status:
          $ref: '#/components/schemas/models.ProcessStatus'
        tokenDecimals:
          description: >-
            tokenDecimals represents the number of decimals of the token (i.e ERC20) used for voting.

            It is normally used for processes with on-chain census
          type: integer
        voteOptions:
          $ref: '#/components/schemas/models.ProcessVoteOptions'
      type: object
    models.ProcessMode:
      properties:
        autoStart:
          type: boolean
        dynamicCensus:
          type: boolean
        encryptedMetaData:
          type: boolean
        interruptible:
          type: boolean
        preRegister:
          type: boolean
      type: object
    models.ProcessResult:
      properties:
        votes:
          items:
            $ref: '#/components/schemas/models.QuestionResult'
          type: array
      type: object
    models.ProcessStatus:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      type: integer
      x-enum-varnames:
        - ProcessStatus_PROCESS_UNKNOWN
        - ProcessStatus_READY
        - ProcessStatus_ENDED
        - ProcessStatus_CANCELED
        - ProcessStatus_PAUSED
        - ProcessStatus_RESULTS
    models.ProcessVoteOptions:
      properties:
        costExponent:
          type: integer
        maxCount:
          type: integer
        maxTotalCost:
          type: integer
        maxValue:
          type: integer
        maxVoteOverwrites:
          type: integer
      type: object
    models.Proof:
      properties:
        payload:
          description: "Types that are assignable to Payload:\n\n\t*Proof_Graviton\n\t*Proof_Iden3\n\t*Proof_EthereumStorage\n\t*Proof_EthereumAccount\n\t*Proof_Ca\n\t*Proof_Arbo\n\t*Proof_ZkSnark\n\t*Proof_MinimeStorage"
      type: object
    models.QuestionResult:
      properties:
        question:
          items:
            items:
              type: integer
            type: array
          type: array
      type: object
    models.SourceNetworkId:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
      type: integer
      x-enum-varnames:
        - SourceNetworkId_UNKNOWN
        - SourceNetworkId_ETH_MAINNET
        - SourceNetworkId_ETH_RINKEBY
        - SourceNetworkId_ETH_GOERLI
        - SourceNetworkId_POA_XDAI
        - SourceNetworkId_POA_SOKOL
        - SourceNetworkId_POLYGON
        - SourceNetworkId_BSC
        - SourceNetworkId_ETH_MAINNET_SIGNALING
        - SourceNetworkId_ETH_RINKEBY_SIGNALING
        - SourceNetworkId_AVAX_FUJI
        - SourceNetworkId_AVAX
        - SourceNetworkId_POLYGON_MUMBAI
        - SourceNetworkId_OPTIMISM
        - SourceNetworkId_ARBITRUM
    models.TxType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
        - 14
        - 15
        - 16
        - 17
        - 18
        - 19
        - 20
        - 21
        - 22
        - 23
      type: integer
      x-enum-varnames:
        - TxType_TX_UNKNOWN
        - TxType_NEW_PROCESS
        - TxType_SET_PROCESS_STATUS
        - TxType_SET_PROCESS_CENSUS
        - TxType_SET_PROCESS_QUESTION_INDEX
        - TxType_ADD_PROCESS_KEYS
        - TxType_REVEAL_PROCESS_KEYS
        - TxType_ADD_ORACLE
        - TxType_REMOVE_ORACLE
        - TxType_ADD_VALIDATOR
        - TxType_REMOVE_VALIDATOR
        - TxType_VOTE
        - TxType_SET_PROCESS_RESULTS
        - TxType_REGISTER_VOTER_KEY
        - TxType_MINT_TOKENS
        - TxType_SEND_TOKENS
        - TxType_SET_TRANSACTION_COSTS
        - TxType_SET_ACCOUNT_INFO_URI
        - TxType_ADD_DELEGATE_FOR_ACCOUNT
        - TxType_DEL_DELEGATE_FOR_ACCOUNT
        - TxType_COLLECT_FAUCET
        - TxType_ADD_KEYKEEPER
        - TxType_DELETE_KEYKEEPER
        - TxType_CREATE_ACCOUNT
    models.Tx_NewProcess:
      properties:
        newProcess:
          $ref: '#/components/schemas/models.NewProcessTx'
      type: object
    models.Tx_Vote:
      properties:
        vote:
          $ref: '#/components/schemas/models.VoteEnvelope'
      type: object
    models.VoteEnvelope:
      properties:
        encryptionKeyIndexes:
          description: >-
            On encrypted votes, contains the (sorted) indexes of the keys used to encrypt
          items:
            type: integer
          type: array
        nonce:
          description: >-
            Unique number per vote attempt, so that replay attacks can't reuse this payload
          items:
            type: integer
          type: array
        nullifier:
          description: Hash of the private key + processId
          items:
            type: integer
          type: array
        processId:
          description: The process for which the vote is casted
          items:
            type: integer
          type: array
        proof:
          allOf:
            - $ref: '#/components/schemas/models.Proof'
          description: Franchise proof
        votePackage:
          description: >-
            JSON string of the Vote Package (potentially encrypted), encoded as bytes.
          items:
            type: integer
          type: array
      type: object
    types.BigInt:
      type: object
tags:
  - description: >-
      Everything about internal Vochain information (transactions, organizations, blocks, stats...)
    name: Chain
  - description: >-
      Related to account metadata (additional account information like balance, storage URI, process count...)
    name: Accounts
  - description: 'Create, manage and get information about elections'
    name: Elections
  - description: 'Manage census: create, add, get, verify...'
    name: Censuses
  - description: 'Submit, get, and verify votes'
    name: Votes
