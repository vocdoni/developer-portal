openapi: 3.0.0
info:
  version: 2.0.0
  title: Vocdoni API
  license:
    name: MIT
  description: >-
    **Goals and Objectives:** 
    
    The Vocdoni API is meant to be the entry point for external integrators to add voting capabilities to an existing 
    CRM, customer base and product experience. The API should act as a satellite that facilitates creating votes using 
    Vocdoni, without the hassle of learning a deep platform.
    
    This API should allow to perform the basic primitives of the Vocdoni Protocol such as manage organizations, voting 
    processes and be able to vote, abstracting as much as possible the complexity and doing so, offering simple and 
    clear methods to perform such actions.

    Last but not least, the API should be modular and allow further expansion with other independent modules such as 
    payments, CSPs, SSI providers, CRM’s, etc. becoming a open voting block/”lego” for the Web2.0 & Web 3.0 world.

servers:
  - url: https://api.vocdoni.io/v2/
tags:
  - name: Accounts
    description: "Related to account metadata (additional account information like balance, storage URI, process count...)"
  - name: Censuses
    description: "Manage census: create, add, get, verify..."
  - name: Chain
    description: "Everything about internal Vochain information (transactions, organizations, blocks, stats...)"
      #    externalDocs:
      #      description: Find out more
      #      url: https://docs.vocdoni.io/architecture/services/gateway.html#api-definition
  - name: Elections
    description: "Create, manage and get information about elections"
  - name: Votes
    description: "Submit, get, and verify votes"
  - name: Wallet
    description: "Create and use a wallet to perform operations on the Vochain relaying private key custody backend side."
paths:
  ####################################################
  ## /chain/transactions                             ##
  ####################################################
  /chain/transactions/cost:
    get:
      summary: "Transactions cost"
      description: "Get the current cost for transactions"
      operationId: transactionCost
      tags:
        - Chain
      responses:
        200:
          description: Return transaction cost parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  costs:
                    type: object
                    properties:
                      AddDelegateForAccount:
                        type: integer
                        format: int32
                        example: 5
                      CollectFaucet:
                        type: integer
                        format: int32
                        example: 0
                      DelDelegateForAccount:
                        type: integer
                        format: int32
                        example: 5
                      NewProcess:
                        type: integer
                        format: int32
                        example: 10
                      RegisterKey:
                        type: integer
                        format: int32
                        example: 1
                      SendTokens:
                        type: integer
                        format: int32
                        example: 1
                      SetAccountInfo:
                        type: integer
                        format: int32
                        example: 5
                      SetProcessCensus:
                        type: integer
                        format: int32
                        example: 1
                      SetProcessQuestionIndex:
                        type: integer
                        format: int32
                        example: 1
                      SetProcessResults:
                        type: integer
                        format: int32
                        example: 1
                      SetProcessStatus:
                        type: integer
                        format: int32
                        example: 1
  /chain/transactions:
    post:
      summary: "Submit transaction"
      description: |-
        It submit a transaction. Depending of transaction type will return different kinds of responses:
        - For a NewElection transaction, `response` will be the `newElectionId`
        - For a Vote transaction, `response` will be the `voteID`
      operationId: transactionSubmit
      tags:
        - Chain
      requestBody:
        description: "Base64 payload string containing transaction data and signature"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionSubmit'
      responses:
        "200":
          description: "Return blockchain response. `response` could differ depending of transaction type."
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    oneOf:
                      - $ref: "#/components/schemas/VoteId"
                      - $ref: "#/components/schemas/TransactionHash"
                  code:
                    type: integer
                    format: int32
                    example: 1
                  hash:
                    $ref: "#/components/schemas/TransactionHash"
  /chain/transactions/reference/{hash}:
    get:
      summary: "Transaction by hash"
      description: |-
        Using transaction hash it return the `block` and `index` containing that contains the transaction. After, you 
        could use this `block` and `index` to retrieve transaction full info using [transaction by block and index](transaction-by-block-index)
      operationId: transactionByReference
      tags:
        - Chain
      parameters:
        - name: hash
          in: path
          description: "Transaction hash"
          required: true
          schema:
            $ref: '#/components/schemas/TransactionHash'
      responses:
        "200":
          description: "It return corresponding blockHeight and transactionIndex"
          content:
            application/json:
              schema:
                type: object
                properties:
                  blockHeight:
                    $ref: "#/components/schemas/BlockHeight"
                  transactionIndex:
                    $ref: "#/components/schemas/TxIndex"
  /chain/transactions/{blockHeight}/{txIndex}:
    get:
      summary: "Transaction by block height and index"
      description: |-
        Get transaction full information by block height and index. It returns JSON transaction protobuff encoded. 
        Depending of transaction type will return different types of objects. Current transaction types are:
        - VoteEnvelope
        - NewProcessTx
        - AdminTx
        - SetProcessTx
        - RegisterKeyTx
        - MintTokensTx
        - SendTokensTx
        - SetTransactionCostsTx
        - SetAccountTx
        - CollectFaucetTx
        - SetKeykeeperTx
      operationId: transactionByBlockIndex
      tags:
        - Chain
      parameters:
        - name: blockHeight
          in: path
          description: "Block height"
          required: true
          schema:
            $ref: '#/components/schemas/BlockHeight'
        - name: txIndex
          in: path
          description: "Transaction index on block"
          required: true
          schema:
            $ref: '#/components/schemas/TxIndex'
      responses:
        "200":
          description: "Returns protobuff transaction content"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxInfoResponse'

  ####################################################
  ## /chain/organizations                            ##
  ####################################################
  /chain/organizations/count:
    get:
      summary: "Count organizations"
      operationId: organizationCount
      tags:
        - Chain
      responses:
        "200":
          description: "It return corresponding blockHeight and transactionIndex"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountResponse"
  /chain/organizations:
    get:
      summary: "List organizations"
      description: |-
        An **Organizations** is an account with `infoUri` that contains organization associated  metadata. 
        An **Account** instead could be a validator, an oracle, a voter or just someone who wants to transfer tokens. 
        
        The `/chain/organizations` endpoints are related only to the Organization account type.
        
        - Return list of organizations ids.
        - If no page is defined, will assume page 0.
      operationId: organizationsList
      tags:
        - Chain
      responses:
        "200":
          description: "It return a list of organizations id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationsListResponse"
  /chain/organizations/page/{page}:
    get:
      summary: "Paginated organizations list"
      description: |-
        See [list organizations](organizations-list)
        If no page is defined, will assume page 0
      operationId: organizationListPaginated
      tags:
        - Chain
      parameters:
        - $ref: "#/components/parameters/paginatorParameter"
      responses:
        "200":
          description: "It return a list of organizations id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationsListResponse"

  ####################################################
  ## /chain/blocks                                  ##
  ####################################################
  # todo(kon): this endpoint is not implemented yet
#  /chain/blocks/height/{height}:
#    get:
#      summary: "Block by height"
#      description: "Get full block information by height"
#      operationId: blockByHeight
#      tags:
#        - Chain
#      parameters:
#        - name: height
#          in: path
#          description: "Block height"
#          required: true
#          schema:
#            $ref: '#/components/schemas/BlockHeight'
#      responses:
#        "200":
#          description: "Full block information"
#          content:
#            application/json:
#              example: |-
#                {
#                }
# todo(kon): this endpoint is not implemented yet
  #  /chain/blocks/hash/{hash}:
#    get:
#      summary: "Block information by hash"
#      description: "Get full block information by block hash"
#      operationId: blockByHash
#      tags:
#        - Chain
#      parameters:
#        - name: hash
#          in: path
#          description: "Block hash"
#          required: true
#          schema:
#            $ref: '#/components/schemas/BlockHash'
#      responses:
#        "200":
#          description: "Full block information"
#          content:
#            application/json:
#              example: |-
#                {
#                }
# todo(kon): this endpoint is not implemented yet
#  /chain/blocks:
#    get:
#      summary: "List blocks"
#      description: "Get list of blocks with its height, hash and number of transactions"
#      operationId: blockList
#      tags:
#        - Chain
#      responses:
#        "200":
#          description: "For every block it return height, hash and number of transactions"
#          content:
#            application/json:
#              example: |-
#                {
#                }

  /chain/dateToBlock/{timestamp}:
    get:
      summary: "Estimate block height"
      description: "Estimates future or past block height by given timestamp."
      operationId: blockFromDate
      tags:
        - Chain
      parameters:
        - name: timestamp
          in: path
          description: "Unix time stamp format"
          required: true
          schema:
            $ref: '#/components/schemas/TimeStamp'
      responses:
        "200":
          description: "For every block it return height, hash and number of transactions"
          content:
            application/json:
              schema:
                type: object
                properties:
                  height:
                    $ref: '#/components/schemas/BlockHeight'

  ####################################################
  ## /chain/ stats, infos ...                       ##
  ####################################################
# todo(kon): this endpoint is not implemented yet
#  /chain/stats:
#    get:
#      summary: "Vochain statistics"
#      description: |-
#        Vocdoni Blockchain (Vochain) statistics
#      operationId: stats
#      tags:
#        - Chain
#      responses:
#        "200":
#          description: "Vochain stats object"
#          content:
#            application/json:
#              example: |-
#                {
#                }
  /chain/info:
    get:
      summary: "Vochain information"
      description: |- 
        Return basic Vocdoni Blockchain (Vochain) information like blockTime, chainId, current height...
        
        For `blockTime` each array position return average time for 1 minute, 10 minutes, 1 hour, 6 hours and 24 hours.
      operationId: info
      tags:
        - Chain
      responses:
        "200":
          description: "Vochain info object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChainInfo"
  ####################################################
  ## /elections/                                     ##
  ####################################################

  /elections/{electionId}:
    get:
      summary: "Election information"
      description: "Get full election information"
      operationId: electionById
      tags:
        - Elections
      parameters:
        - $ref: "#/components/parameters/electionIdParameter"
      responses:
        "200":
          description: "Election full info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElectionInfo"

  /elections/{electionId}/keys:
    get:
      summary: "Election keys"
      description: "Get public and private keys for specific election"
      operationId: electionGetKeys
      tags:
        - Elections
      parameters:
        - $ref: "#/components/parameters/electionIdParameter"
      responses:
        "200":
          description: "Return list of keys"
          content:
            # todo(kon): check this object is correct and add examples
            application/json:
              schema:
                type: object
                properties:
                  election:
                    type: object
                    properties:
                      publicKeys:
                        type: array
                        items:
                          type: string
                          example: "Pub key"
                      privateKeys:
                        type: array
                        items:
                          type: string
                          example: "Priv key"
  /elections/{electionId}/votes:
    get:
      summary: "List election votes"
      description: |-
        Get a list of votes `nullifiers` for a election. The `nullifier` is a unique identifier for an election
        Default page is 0 if no page specified
        If election is not ended, it show the votes only if the envelope type is not encrypted.
      operationId: electionVotes
      tags:
        - Elections
      parameters:
        - $ref: "#/components/parameters/electionIdParameter"
      responses:
        "200":
          description: "Return list of nullifiers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoteListResponse"
  /elections/{electionId}/votes/page/{page}:
    get:
      summary: "Paginated election votes list"
      description: |-
        See [get votes](election-votes)
        Default page is 0 if no page specified
      operationId: electionVotesPaginated
      tags:
        - Elections
      parameters:
        - $ref: "#/components/parameters/electionIdParameter"
        - $ref: "#/components/parameters/paginatorParameter"
      responses:
        "200":
          description: "Return list of nullifiers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoteListResponse"
  /elections/{electionId}/votes/count:
    get:
      summary: "Count election votes"
      description: |-
        Count of election emitted votes.
      operationId: electionVotesCount
      tags:
        - Elections
      parameters:
        - $ref: "#/components/parameters/electionIdParameter"
      responses:
        "200":
          description: "Count of votes"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountResponse"
  /elections:
    post:
      summary: "Create an election"
      description: |-
        Create an election. 
        - Where `txPayload` is a protobuff signed transaction
        - `Metadata` is the base64 election metadata to save on the storage (IPFS on our case). If metadataURL is 
        returned empty, means that there is some issue with the storage provider
      operationId: createElection
      tags:
        - Elections
      requestBody:
        description: "The payloads must be a base64 representation of the needed JSON objects."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateElection'
      responses:
        "200":
          description: "It return txId, electionId and the metadataURL for the newly created election"
          content:
            application/json:
              schema:
                type: object
                properties:
                  txHash:
                    $ref: "#/components/schemas/TransactionHash"
                  electionID:
                    $ref: "#/components/schemas/ElectionId"
                  metadataURL:
                    $ref: "#/components/schemas/IpfsUri"

  ####################################################
  ## /accounts/                                      ##
  ####################################################
  /accounts/{accountId}:
    get:
      summary: "Get account information"
      description: |-
        Get account information by its address or public key.
        Return the `infoURI` parameter where to find account metadata (like avatar, name...)
      operationId: accountByAddress
      tags:
        - Accounts
      parameters:
        - $ref: "#/components/parameters/accountIdParameter"
      responses:
        "200":
          description: "Return account data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInfoResponse'

  /accounts:
    post:
      summary: "Register an account"
      description: |-
        It register an account to the blockchain including IPFS metadata upload. 
        
        - Requires a signed protobuff transaction on the body to perform the operation.
        - Metadata is not required, but if no metadata is provided the account won't be listed on 
        [/chain/organizaions](organizations-list) endpoint. Check there to read about differences between an account and
        a organization.
      operationId: accountSubmit
      tags:
        - Accounts
      requestBody:
        description: "Transaction payload and metadata object encoded using base64 "
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountSubmit'
      responses:
        "200":
          description: "Returns registered transaction hash and the IPFS file url for account metadata "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSubmitResponse'

  /accounts/{accountId}/elections/status/{status}:
    get:
      summary: "List account elections by status"
      description: "Default page is 0 if no page specified"
      operationId: electionsByOrganizationAndStatusPaginated
      tags:
        - Accounts
      parameters:
        - $ref:  "#/components/parameters/accountIdParameter"
        - $ref:  "#/components/parameters/electionStatusParameter"
      responses:
        "200":
          description: "It return a list of elections"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityElectionsResponse"
  /accounts/{accountId}/elections/status/{status}/page/{page}:
    get:
      summary: "List paginated account elections by status"
      description: "Default page is 0 if no page specified"
      operationId: electionsByOrganizationAndStatus
      tags:
        - Accounts
      parameters:
        - $ref: "#/components/parameters/accountIdParameter"
        - $ref:  "#/components/parameters/electionStatusParameter"
        - $ref: "#/components/parameters/paginatorParameter"
      responses:
        "200":
          description: "It return a list of elections"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityElectionsResponse"
  /accounts/{accountId}/elections/:
    get:
      summary: "List account elections"
      description: "If no page is defined, will assume page 0"
      operationId: electionsByOrganizationPaginated
      tags:
        - Accounts
      parameters:
        - $ref: "#/components/parameters/accountIdParameter"
      responses:
        "200":
          description: "It return a list of elections"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityElectionsResponse"
  /accounts/{accountId}/elections/page/{page}:
    get:
      summary: "List paginated account elections"
      description: "If no page is defined, will assume page 0"
      operationId: electionsByOrganization
      tags:
        - Accounts
      parameters:
        - $ref: "#/components/parameters/accountIdParameter"
        - $ref: "#/components/parameters/paginatorParameter"
      responses:
        "200":
          description: "It return a list of elections"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityElectionsResponse"
  /accounts/{accountId}/elections/count:
    get:
      summary: "Count account elections"
      operationId: electionsByOrganizationCount
      tags:
        - Accounts
      parameters:
        - $ref: "#/components/parameters/accountIdParameter"
      responses:
        "200":
          description: "Count of elections"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountResponse'
  ####################################################
  ## /wallet                                        ##
  ####################################################
  /wallet/add/{privateKey}:
    post:
      summary: "Add wallet"
      description: |-
        Adds a new wallet to the storage using privateKey
        - PrivateKey is a 32 bytes hexadecimal string
        - Returns a Bearer Token that must be used on further wallet calls (if the token is lost, the API backend cannot
        recover the privatekey). Token is a [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier)
      operationId: addWallet
      tags:
        - Wallet
      parameters:
        - name: privateKey
          in: path
          description: "32 bytes hexadecimal string"
          required: true
          schema:
            $ref: '#/components/schemas/WalletPrivateKey'
      responses:
        "200":
          description: "Return account data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: "#/components/schemas/Uuid"
                  address:
                    $ref: "#/components/schemas/WalletAddress"
  /wallet/bootstrap:
    post:
      summary: "Create an account"
      description: |-
        Creates the account on the blockchain relaying private key custody backend side. It differs from 
        `POST account/` that require signed transaction on the body".
        
        The `response` attribute on the response object is the newly created account id.
        
        All `wallet/` operations relay on the private key custody by the backend.
      operationId: walletBootstrap
      tags:
        - Wallet
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "Return signed and sent transaction response from the blockchain"
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/AccountId"
                  code:
                    type: integer
                    format: int32
                    example: 1
                  hash:
                    $ref: "#/components/schemas/TransactionHash"
  /wallet/transfer/{destAddr}/{amount}:
    post:
      summary: "Transfer VOC tokens"
      description: |-
        Transfer an amount of VOC tokens to a public destination address.
        Return blockchain transaction
      operationId: walletTransfer
      security:
        - bearerAuth: [ ]
      tags:
        - Wallet
      parameters:
        - name: destAddr
          in: path
          description: "Wallet destination address"
          required: true
          schema:
            $ref: '#/components/schemas/WalletAddress'
        - name: amount
          in: path
          description: "Amount of VOC tokens"
          required: true
          schema:
            type: number
            format: double
            example: "2.2"
      responses:
        "200":
          description: "Operation success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/AccountId"
                  code:
                    type: integer
                    format: int32
                    example: 1
                  hash:
                    $ref: "#/components/schemas/TransactionHash"
  /wallet/election:
    post:
      summary: "Create an election"
      description: |-
        It differs with `POST election/` because is not needed to send signed transactions on the body so its data model 
        is much simplified.
        
        It return election information.
        
        All `wallet/` operations relay on the private key custody by the backend.
      operationId: walletElectionPost
      security:
        - bearerAuth: [ ]
      tags:
        - Wallet
      requestBody:
        description: "Election description "
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WalletElectionRequest"
      responses:
        "200":
          description: "Election information object"
          content:
            application/json:
              example: |-
                {
                  "title": "APIv2 test process",
                  "description": "this is a testing election",
                  "header": "https://unsplash.com/photos/-TgHIH6glbk/download?ixid=MnwxMjA3fDB8MXxhbGx8Mjd8fHx8fHwyfHwxNjY0MjI3ODM1&force=true&w=640",
                  "streamUri": "",
                  "startDate": "2022-09-27T00:40:29+02:00",
                  "endDate": "2022-09-28T00:20:29+02:00",
                  "voteType": {
                    "uniqueChoices": false,
                    "maxVoteOverwrites": 1,
                    "costFromWeight": false,
                    "costExponent": 10000
                  },
                  "electionType": {
                    "autoStart": true,
                    "interruptible": true,
                    "dynamicCensus": false,
                    "secretUntilTheEnd": false,
                    "anonymous": false
                  },
                  "census": {
                    "type": "csp",
                    "publicKey": "f6e19f03a6304cd25ba0bc536c5cfa2b5b6c9aa05d2d25fce2aa0682bc18dbda"
                  },
                  "questions": [
                    {
                      "title": {
                        "default": "first question"
                      },
                      "description": {
                        "default": "lets vote"
                      },
                      "choices": [
                        {
                          "title": {
                            "default": "this is a choice"
                          },
                          "value": 0
                        },
                        {
                          "title": {
                            "default": "this is another choice"
                          },
                          "value": 1
                        }
                      ]
                    }
                  ]
                }

  ####################################################
  ## /censuses                                        ##
  ####################################################
  /censuses/{type}:
    post:
      summary: "Create new census"
      description: |-
        Create a new census on the backend side. The census is still unpublished until [publish](census-publish) is 
        called.  
        
        To create the census it require a `Bearer token` created on the user side using a 
        [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier). This token **should we stored for the user 
        to perform operations to this census** such add participants or publish.
        
        It return a new random censusID (a random 32 bytes hex string), which are used (along with the Bearer token) to 
        [add participant keys](census-add-participants) to the census. Once the census is published no more keys can be 
        added.
        
        To use a census on an election, it **must be published**.
        
        - Available types are: `weighted` and `zkindexed`
        - Require header Bearer token created user side
      operationId: censusCreate
      tags:
        - Censuses
      security:
        - bearerAuth: [ ]
      parameters:
        - name: type
          in: path
          description: "Census types"
          required: true
          schema:
            $ref: '#/components/schemas/CensusType'
      responses:
        "200":
          description: "Return new census id"
          content:
            application/json:
              schema:
                type: object
                properties:
                  censusId:
                    $ref: '#/components/schemas/CensusId'
  /censuses/{censusId}/root:
    get:
      summary: "Census Merkle Root"
      description: |-
        Get census [Merkle Tree root](https://docs.vocdoni.io/architecture/census/off-chain-tree.html) hash, used to
        identify the census at specific snapshot. 
        
        - Bearer token not required
      operationId: censusRoot
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
      responses:
        "200":
          description: "Return Merkle Root"
          content:
            application/json:
              schema:
                type: object
                properties:
                  root:
                    $ref: "#/components/schemas/MerkleRoot"
  /censuses/{censusId}/export:
    get:
      summary: "Export census"
      description: |-
        Export census to JSON format
        - Requires Bearer token
      operationId: censusExport
      security:
        - bearerAuth: [ ]
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
      responses:
        "200":
          description: "Return census on JSON format"
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    $ref: "#/components/schemas/CensusType"
                  rootHash:
                    $ref: "#/components/schemas/MerkleRoot"
                  data:
                    $ref: "#/components/schemas/CensusEncodedData"
                  indexed:
                    type: boolean
                    example: true
  /censuses/{censusId}/import:
    get:
      summary: "Import census"
      description: |-
        Import census from JSON previously exported using [`/censuses/{censusId}/export`](census-export)
        - Requires Bearer token
      operationId: censusImport
      security:
        - bearerAuth: [ ]
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
      responses:
        "200":
          description: "Return 200"
  /censuses/{censusId}/weight:
    get:
      summary: "Census total weight"
      description: |-
        It sums all weights added to the census. Weight is a stringified bigInt
      operationId: censusWeight
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
      responses:
        "200":
          description: "Sum of weight son a stringfied big int format"
          content:
            application/json:
              schema:
                type: object
                properties:
                  weight:
                    type:  string
                    example: "2"
  /censuses/{censusId}/size:
    get:
      summary: "Census size"
      description: |-
        Total number of keys added to the census. 
        - Size as integer
      operationId: censusSize
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
      responses:
        "200":
          description: "Size as integer"
          content:
            application/json:
              schema:
                type: object
                properties:
                  size:
                    type: integer
                    format: int32
                    example: 1
  /censuses/{censusId}/publish/{root}:
    post:
      summary: "Publish census at specific root"
      description: |-
        Publish the census at specific root. 
        
        See [censuses/{censusId}/participants](census-publish) and 
        [censuses/{censusId}/participants](census-add-participants)
      operationId: censusPublishRoot
      security:
        - bearerAuth: [ ]
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
        - name: root
          in: path
          description: "Merkle root for specific census snapshot"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "New census Id and storage uri"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CensusPublishResponse"
  /censuses/{censusId}/publish:
    post:
      summary: "Publish census"
      description: |-
        Register a census to the storage (IPFS in our case). After this, the census can't be edited. 
        
        You could provide the census Merkle root to specify census publication at specific snapshot. 
        See [censuses/{censusId}/participants](census-add-participants)
        
        - Requires Bearer token
        - The census is copied to a new census identified by its Merkle Root
        - The new census **cannot be modified**
        - The census is published to the storage provided (IPFS in our case)
        - The new census ID is returned and can be used for querying
        - If a censusID with the same root has been already published, the request will fail
      operationId: censusPublish
      security:
        - bearerAuth: [ ]
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
      responses:
        "200":
          description: "New census Id and storage uri"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CensusPublishResponse"
  /censuses/{censusId}/proof/{publicKey}:
    get:
      summary: "Prove key to census"
      description: |-
        Prove the key and weight belong to the census root hash.
        
        If the key exists on the census returns Merkle root information. `Proof` property is referred to the siblings 
        of Merkle tree, the `value` points to the leaf of the Merkle Tree for this key (on this case, the weight), and
        weight is just the key weight for this census. 
        
        [Further reading](https://docs.vocdoni.io/architecture/census/off-chain-tree.html)
        
        - Requires Bearer token 
        - Returns a merkle proof, proving the key and weight belongs to the census root hash
      operationId: censusVerifyKey
      security:
        - bearerAuth: [ ]
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
        - $ref: "#/components/parameters/walletPublicKeyParameter"
      responses:
        "200":
          description: "Return proof, weight and value"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CensusKeyProof"
  /censuses/{censusId}/verify:
    post:
      summary: "Verify merkle proof"
      description: |-
        Verify that a previously obtained Merkle proof for a key, acquired via 
        [/censuses/{censusId}/proof/{publicKey}](http://localhost:3000/vocdoni-api/census-verify-key) is still correct.
      operationId: censusVerifyProof
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
      requestBody:
        description: "Previously obtained Merkle proof object"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CensusKeyProof'
      responses:
        "200":
          description: "Return valid true in case verification is Ok"
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
  /censuses/{censusId}/participants:
    post:
      summary: "Add participants to census"
      description: |-
        Add list of public key/address with its weight to an unpublished census and returns the resulting 
        [Merkle Root](https://en.wikipedia.org/wiki/Merkle_tree).  
        
        Each addition will modify the census merkle root creating a new "snapshot" of the census at this moment. This 
        root  identifies the census at this point and can be used to publish the census at this specific state.
        
        For example, supposing a census with id `0x1234` (random hex string generated during census creation), add 10 
        keys will generate specific root for this state, ex `0xabcd`. 
        
        If we add 5 keys more, the resulting root changes, the keys are added and the new census have the first 10 keys
        plus the last 5, with a resulting root of `0xffff`. 
        
        So, at [publishing moment](census-publish), you could specify no root to publish census on the last 
        state (`0xffff`), which will publish the first 10 plus the last 5. Or either specify the snapshot point which 
        you want to publish the census, for example `0x1234`, which will publish just the first 10th.
               
        - Requires Bearer token 
        - Adds a list of wallet public key or wallet address to a census with a specific weight
        - If the weight parameter is missing, weight=1 is considered
      operationId: censusAddParticipants
      security:
        - bearerAuth: [ ]
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
      requestBody:
        description: "PublicKey - weight array "
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CensusAddKeys'
      responses:
        "200":
          description: "Return 200 if keys added properly"
  /censuses/{censusId}:
    delete:
      summary: "Delete census"
      description: |-
        Delete unpublished census (not on the storage yet). See [publish census](census-publish)
        - Requires Bearer token
        - Deletes a census from the server storage
        - Published census cannot be deleted
      operationId: censusDelete
      security:
        - bearerAuth: [ ]
      tags:
        - Censuses
      parameters:
        - $ref: "#/components/parameters/censusIdParameter"
      responses:
        "200":
          description: "Return status code 200"

  ####################################################
  ## /votes                                          ##
  ####################################################

  /votes/{voteId}:
    get:
      tags:
        - Votes
      summary: "Get vote"
      description:  >-
        Get the content of an existing Vote. The Vote is identified by the nullifier. Height and txIndex refer to the 
        block height and the index of the transaction where vote is registered.
      operationId: voteGet
      parameters:
        - $ref: "#/components/parameters/voteIdParameter"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteEnvelopeResponse'
        '400':
          description: Invalid nullifier supplied
        '404':
          description: Vote not found
        '500':
          description: Internal server error
  /votes:
    post:
      tags:
        - Votes
      summary: "Submit vote"
      description: |-
        Submit a vote using a protobuff signed transaction. The corresponding result are the vote id and transaction 
        hash where the vote is registered.
      operationId: voteSubmit
      requestBody:
        description: "Requires a protobuff signed transaction"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                txPayload:
                  $ref: "#/components/schemas/Base64String"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  vote:
                    type: object
                    properties:
                      voteId:
                        $ref: "#/components/schemas/VoteId"
                      txHash:
                        $ref: "#/components/schemas/TransactionHash"
  /votes/verify/{electionId}/{voteId}:
    post:
      tags:
        - Votes
      summary: "Verify vote"
      description: "Check if vote is registered on the blockchain. Just return Ok status code"
      operationId: voteVerify
      parameters:
        - $ref: "#/components/parameters/voteIdParameter"
        - $ref: "#/components/parameters/electionIdParameter"
      responses:
        '200':
          description: Successful operation
components:
  parameters:
    electionStatusParameter:
      name: status
      in: path
      description: "Status of the election"
      required: true
      schema:
        $ref: '#/components/schemas/ElectionStatusFilter'
    accountIdParameter:
      name: accountId
      in: path
      description: "Account address or publicKey (also known as accountId)"
      required: true
      schema:
        $ref: '#/components/schemas/AccountId'
    censusIdParameter:
      name: censusId
      in: path
      description: "Census id provided during census creation"
      required: true
      schema:
        $ref: '#/components/schemas/CensusId'
    paginatorParameter:
      name: page
      in: path
      description: "When returning a list it define de page number. If empty, default is 0"
      allowEmptyValue: true
      required: true
      schema:
        type: integer
        example: 1
        default: 0
    electionIdParameter:
      name: electionId
      in: path
      description: "Election Id on 0x format"
      required: true
      schema:
        $ref: '#/components/schemas/ElectionId'
    voteIdParameter:
      name: voteId
      in: path
      description: "Nullifier of the vote"
      required: true
      schema:
        $ref: "#/components/schemas/VoteId"
    walletPublicKeyParameter:
      name: publicKey
      in: path
      description: "Wallet Public key or address"
      required: true
      schema:
        $ref: '#/components/schemas/WalletPublicKey'

  schemas:
    AccountSubmit:
      type: "object"
      properties:
        txPayload:
          $ref: "#/components/schemas/Base64String"
        metadata:
          $ref: "#/components/schemas/Base64String"
    AccountId:
      type: string
      example: "0x370372b92514d81a0e3efb8eba9d036ae0877653"
    BlockHeight:
      type: integer
      format: int32
      example: 64924
    BlockHash:
      type: string
      example: "0x8617ef5bef3551ab1386845ff03ee2f43e13377d6b75e9e2d656bfb0276c0170"
    Base64String:
      type: string
      example: "<Base64 string>"
    ChainInfo:
      type: object
      properties:
        chainId:
          type: string
          example: "azeno"
        blockTime:
          type: array
          items:
            type: integer
            format: int32
          example:
            - 12000 // average 1 minute
            - 11580 // 10 minutes
            - 11000 // 1h
            - 11100 // 6h
            - 11100 // 24h
        height:
          $ref: "#/components/schemas/BlockHeight"
        blockTimestamp:
          $ref: "#/components/schemas/TimeStamp"
    CreateElection:
      type: "object"
      required:
        - txPayload
      properties:
        txPayload:
          type: "string"
          example: "Base64 string of NewProcessTx transaction bytes"
        metadata:
          type: string
          example: "optional: base64 string of election metadata JSON object"
    CensusType:
      type: string
      enum: [ weighted, zkindexed ]
      example: weighted
    CensusId:
      type: string
      description: "Random 32 bytes hex string"
      example: "b547a9c83ad7d61b568cf10ebbb25338d680810fa219fa69477cfbd860b386c2"
    CensusEncodedData:
      type: string
      description: "Base64 encoded bytes containing public keys"
      example: "KLUv/QQAbQEAVAIgIAAUhfh8HDhDtV8Z+nm1Je+bGVzm2nEScc1pkPtfARvh4AIAAVQWAhsleowCTw=="
    CensusOrigin:
      type: string
      enum:
        - CENSUS_UNKNOWN
        - OFF_CHAIN_TREE
        - OFF_CHAIN_TREE_WEIGHTED
        - OFF_CHAIN_CA
        - ERC20
        - ERC721
        - ERC1155
        - ERC777
        - MINI_ME
    CensusKeyProof:
      type: object
      properties:
        weight:
          type: number
          format: int32
          example: 2
        proof:
          description: "Merkle tree siblings"
          type: string
          example: "04000000"
        value:
          description: "Merkle tree leaf value"
          type: string
          example: "0200000000000000000000000000000000000000000000000000000000000000"
    CensusAddKeys:
      type: "object"
      properties:
        participants:
          type: array
          items:
            type: "object"
            properties:
              key:
                $ref: "#/components/schemas/WalletPublicKey"
                required: true
              weight:
                description: "Vote weight for this key"
                type: integer
                example: 1
                default: 1
            required:
              - key
    ChoiceMetadata:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/LangString"
        value:
          type: integer
          format: int32
          example: 1
    ElectionStatusFilter:
      type: string
      enum: [ active, paused, ended ]
      description: >
        Election status enum
      example: "active"
    ElectionId:
      type: string
      example: "0xcfc47afa95bc60bc32ef4ff214df79ea8f53881640094d0ce63817bf6e867845"
    ElectionType:
      type: object
      properties:
        autostart:
          type: boolean
          example: true
        interruptible:
          type: boolean
          example: true
        dynamicCensus:
          type: boolean
          example: false
        secretUntilTheEnd:
          type: boolean
          example: false
        anonymous:
          type: boolean
          example: false
    # it differs from ElectionStatus that is used as filter parameter
    ElectionStatusInfo:
      type: string
      enum:
        - PROCESS_UNKNOWN
        - READY
        - ENDED
        - CANCELED
        - PAUSED
        - RESULTS
    ElectionInfo:
      type: object
      properties:
        electionId:
          $ref: "#/components/schemas/ElectionId"
        type:
          type: string
          example:
            - "anonymous open single" # todo(kon): each one of this values have an alternative. Check if this is final format of type
            - "poll encrypted serial"
        status:
          $ref: "#/components/schemas/ElectionStatusInfo"
        startDate:
          $ref: "#/components/schemas/TimeStamp"
        endDate:
          $ref: "#/components/schemas/TimeStamp"
        creationTime:
          $ref: "#/components/schemas/TimeStamp"
        voteCount:
          type: integer
          format: int32
          example: 61
        electionCount:
          type: integer
          format: int32
          example: 0
        finalResults:
          type: boolean
          example: false
        metadataURL:
          $ref: "#/components/schemas/IpfsUri"
        result:
          type: array
          items:
            type: object
            properties:
              value:
                type: array
                items:
                  type: string
                example:
                  - "6049752455547578274294031"
                  - "33965616553398058290000"
                  - "0"
        census:
          type: object
          properties:
            censusOrigin:
              $ref: "#/components/schemas/CensusOrigin"
            censusRoot:
              $ref: "#/components/schemas/CensusId"
            postRegisterCensusRoot:
              type: string
              example: ""
            censusURL:
              type: string
              example: ""
        voteMode:
          type: object
          properties:
            serial:
              type: boolean
              example: false
            anonymous:
              type: boolean
              example: true
            encryptedVotes:
              type: boolean
              example: false
            uniqueValues:
              type: boolean
              example: false
            costFromWeight:
              type: boolean
              example: false
        electionMode:
          type: object
          properties:
            autoStart:
              type: boolean
              example: true
            interruptible:
              type: boolean
              example: false
            dynamicCensus:
              type: boolean
              example: false
            encryptedMetaData:
              type: boolean
              example: false
            preRegister:
              type: boolean
              example: false
        tallyMode:
          type: object
          properties:
            maxCount:
              type: integer
              format: int32
              example: 1
            maxValue:
              type: integer
              format: int32
              example: 2
            maxVoteOverwrites:
              type: integer
              format: int32
              example: 1
            maxTotalCost:
              type: integer
              format: int32
              example: 0
            costExponent:
              type: integer
              format: int32
              example: 10000
    AnyUri:
      oneOf:
        - $ref: "#/components/schemas/IpfsUri"
        - $ref: "#/components/schemas/HttpsUri"
    IpfsUri:
      type: string
      example: "ipfs://QmXxgLNRSeK6jtFkJ9TsL8nYxFnJ8RKa2xXHUFKGankX6k"
    HttpsUri:
      type: string
      example: "https://url.to/any/place"
    LangString:
      type: object
      properties:
        default:
          type: string
        additionalProperties:
          type: string
      example:
        default: Hello
        es: Hola
    MerkleRoot:
      type: string
      example: "tKh1sD9vmT6dr4BPZ6b8GDt6TZtjkKvLbX9W/xTTlLY="
    Question:
      type: object
      properties:
        choices:
          $ref: "#/components/schemas/ChoiceMetadata"
        description:
          $ref: "#/components/schemas/LangString"
        title:
          $ref: "#/components/schemas/LangString"
    TransactionSubmit:
      type: "object"
      properties:
        payload:
          $ref: "#/components/schemas/Base64String"
    TransactionHash:
      type: string
      example: "75e8f822f5dd13973ac5158d600f0a2a5fea4bfefce9712ab5195bf17884cfad"
    Uuid:
      type: string
      example: "123e4567-e89b-12d3-a456-426655440000"
    VoteId:
      type: string
      example: "1056bc4d864c12659be306be1f4f31e1f5dcf9e61cb85c8e67509c59144c59ad"
    VoterId:
      type: string
      example: "0090782b695bbe528331540ed14e4b92b9101673fb4a6bfe6d904e9ab784bce1"
    VoteType:
      type: object
      properties:
        uniqueChoices:
          type: boolean
          example: false
        maxVoteOverwrites:
          type: integer
          example: 1
        costFromWeight:
          type: boolean
          example: false
        costExponent:
          type: integer
          example: 10000
        maxCount:
          type: integer
          example: 10000
        maxValue:
          type: integer
          example: 10000
    TxIndex:
      type: integer
      format: int32
      example: 0
    WalletPrivateKey:
      type: string
      example: "E9873D79C6D87DC0FB6A5778633389F4453213303DA61F20BD67FC233AA33262"
    WalletPublicKey:
      type: string
      example: "1f7fecf4cf4564c88a92af55046c5c4bf0a76b9b5536f7d30962192552f92237"
    WalletAddress:
      type: string
      example: "0x1ABC7154748D1CE5144478CDEB574AE244B939B5."
    TimeStamp:
      type: string
      description: "Unix time timestamp"
      format: date-time
      example: "1668503879"

    ####################################################
    ## Responses                                      ##
    ####################################################
    AccountInfoResponse:
      type: "object"
      properties:
        address:
          type: string
          example: "e0c941dd44ff4c43fc4683088b846ddb3234d169"
        balance:
          type: integer
          format: int32
          example: 9568
        nonce:
          type: string
          example: 186
        infoURI:
          $ref: "#/components/schemas/IpfsUri"
        processIndex:
          type: integer
          format: int32
          example: 38
    AccountSubmitResponse:
      type: "object"
      properties:
        txHash:
          type: string
          example:
            "6cc88bda2da0edef96b8d4f75f0a8134953e9816918e665254ea06801af59a70"
        metadataURL:
          $ref: "#/components/schemas/IpfsUri"
    AccountElectionListResponse:
      type: "object"
      properties:
        account_id:
          $ref: "#/components/parameters/accountIdParameter"
        elections:
          type: array
          items:
            $ref: "#/components/schemas/ElectionId"
    CountResponse:
      type: "object"
      properties:
        count:
          type: integer
          format: int32
          example:
            "1"
    CensusPublishResponse:
      type: object
      properties:
        censusID:
          $ref: "#/components/schemas/CensusId"
        uri:
          $ref: "#/components/schemas/IpfsUri"
    EntityElectionsResponse:
      type: object
      properties:
        # todo(kon): re-check this when the backend work
        organizationId:
          $ref: "#/components/schemas/AccountId"
        elections:
          type: array
          items:
            $ref: "#/components/schemas/ElectionInfo"
    OrganizationsListResponse:
      type: object
      properties:
        organizations:
          type: array
          items:
            type: object
            properties:
              organization_id:
                $ref: "#/components/schemas/AccountId"
              election_count:
                type: integer
                format: int32
                example: 1
    TxVote:
      type: object
      properties:
        vote:
          type: object
          properties:
            nonce:
              $ref: "#/components/schemas/VoteId"
            processId:
              $ref: "#/components/schemas/ElectionId"
            votePackage:
              type: string
              example: "eyJub25jZSI6ImFjYjcyOWU3ZmQ1OTA2ZWUiLCJ2b3RlcyI6WzJdfQ=="
            nullifier:
              type: string
              example: ""
            encryptionKeyIndexes:
              type: array
              items:
                type: integer
            proof:
              type: object
              properties:
                ethereumStorage:
                  type: string
                  example: "friRbvlOgkNexQvnZ1RL910Jlz3m1W4V5BzqhpZSBpY="
                value:
                  type: string
                  example: "SpVFE04rDsBN="
                sibling:
                  type: array
                  items:
                    type: string
                  example:
                    - +QIRoIgbDfwMc1Y5GwlV09bdBi5MzCcTe/OnriNGjTmMqxwGoAY5+PbCDHE6I5bdMCQhM3a0HWFoKBP33MHiwb0NdDEsoB4mkcRSuZ9664LdrjMYZwYyrwq/bKY4znGRvQsw517joFK8lpmTMyvhkzu7UGiuD/P7Jt4HZQ92Mqed73BB0pk7oBDctHz+NzhIBs+SUxPclEMV7igZ04aLk6g1KeIwHFcQoI3sDImHbNtwYKz+bAit/uuk9SYgrpQNwaG7M55iuvjvoDWeGIZq2zAhf/V5Q3Q7uQ8sq8ViuO6eovgmpW1n+dxhoFMo439r4PAT8PGA3CFhkILya7RKzzmCQTvuMCnTMvOCoKoPbemkdrV96fTEzTjlWOn1Tq430El1g/8PVn3J5e8moMLLCuhf3Ie2moES6m7IALMzf5Gq/8pf8IyH5emROwRPoEQ875gAkM9PEV+XiWuex1P7S4SnzTjc2cuGpagcAKl7oINOE7+SJ+RiD811eXrQoytjEhznMauEMLgJQf8enYEcoKrcUhDbjADzU2fMhOr9OrQCztjwDcEsplAuptnOKspioPFqErJFYpDA4AN+N+c+R0n5X3uLYDkPNWntHRqX2wgwoAxB6cWD0vWR5yodESoVjk6zMkTnLaYn8hJIljXoW5droEt0U6uaCWTaqhHZ5l5DCE2tJDC1YKPjIFPEnWWF3L5VgA==
                    - +QIRoGg4UabE6udg4xRACLCwUp6c78Kd1aVcEqwStimjI6zOoHFMOM7DvgZeZNHa0Tydqd53EiDTzRXHlmeqidR5WMyXoEwU6JTz2eL2hB2VYE9AyvAlvMpHftVauHaAWK7fARYBoMF8IfsPFhlHRPxZ/cwkFIDn7+U+QWPFh/Zj0n0Z8lXLoBO0IgA3bvpXAhg9tPxhQlrT3pGvWjmpqcl5XwN1ZPl4oEUpa+p8xPjNKD579/IBjdnEm66CxtVrWAyAc9c9N6TqoE9NovFfKJl+IZVQw8HCIWX+/q+0t+R28LWTiK9adpU1oBGGjM/LyiIknIyB9nB7+Ty+kZgJffPxCRdg0aiPg2nFoIft59/Z4qq72G8I8a4duVCzH7UzQMMOsEdUy3iXaeQ4oC8uemDTf6gjll+5XkpOpC7M440wL0ND384+QiEebn1ToDi577kLYA/MxTpAHoluljP6xhr2mvOBg7jX5vFigOfOoPBdo5NxaR+PulfZXI1TK6/1Rbg22uq6SHNecDRsQ5c5oC8vQBNyGBhOTsez5LcfaAX3u2/fTQKsm6fnVDICkcSNoNQQ/4lP+hUZLHYnEBtyaiUKgxrew9X6pH+bTgk8+IyaoHPfYpQKTEAgp8GI9hDLUKhY5RD77cPBqrpZmcEREJKcoITDSOC1hJ/Y+YLl3pr16hVbABPjovFdlI/T0br2o7d+gA==
                    - +QIRoLM2fHA0PA0LCr5AaWSFXKvC4Wc9BGHFsrTVtudKadcboKAHRm8+oFav3QtIPJ+jGn9Jdvt3kLPctRuEjgXboRddoBqh5SrQ6afqlC17NGX2rxubB2aaaBvMLFvx2EgSVczdoOKK7Vr2Z2McbpJ5AjzzxCHYGQYUo5IZz/928zrKnxCJoBrdZMjDH9cuudUqu5XOQ8e9jC+lZ7JiW/Q0/Mrl77S7oB0A+hiWVnkazBzng1bSjZbFKmXInMQ1tEEb+2TazpEWoPKy7stwCo5rMr1niFkCDAYWaZ842qpG4NqXHAmQ1idPoNbrrYsHBvD6+r3MIYbdgJWpGV1cbSaNx/W0f83bCFdioFKsgNW+sSZVq2rTjT3PRa49MmkLgk6VV3QP+WsEhaYooAPIIjj3qVC4Xyh6rlVbFAjH5gdc43JNxtymtpaUOJI6oIWTm2IAyHsDa78CXEYRn8dVP1ET9O83HRKqGWUi8bkroNBGgVhQfwjuAmx/g31tdHO1D09C2jcaeQLpI8vhZtn7oP3jngtAwXAJtNT6jMJkDT6iHHqyg4nY5/hoNfTDUGmNoNBRKE9eTQxrvGzGU+mKPbwYgQobkQnqqknvnTxXZPUUoDorGea1vdy7V7OuYVCPMw5lz5XMHu0uBEkS7+GecUjuoEPTH+9kB/7tMTyJks2HxH63I+wP+nrkHnD2krPoHBXogA==
                    - +PGgANm072y2kmljHhGUZ7cLL3KOXGhyMYOvG3bGE7JNfheglqg+C1iDGUrFO0V9DbhNwsTngYePTcJE3/fT68TmteKgnQ2FWiXIuGrXK+0tvYdCnHzgZ2KFY8qiaJrdNY2kzC2ggMEQaBJLXMy8cKDZs7tjfBN30rUdT5cq6PIjxhIMCO2AgKC193R4QX6e1SQd29VxDKfHbjou9eerWmoDnUsYBy/T6ICAgKAlLBgMqhnYyoP4jeYLcdEEO2A0/rPRjMwBA/b13r7L4KDSNz/51bOu0hO2RFyj4TpdI669J57c5Cx4/0YwSMqjUYCAgICA
                    - 658gXcgKKPPIVy8XiNBECfdA7BmMbyB7EhTDfhmW97D7iolKlUUTTisOwE0=
    TxInfoResponse:
      # todo: implement more tx types!
      oneOf:
        - $ref: "#/components/schemas/TxVote"
    VoteListResponse:
      type: object
      properties:
        vote_id:
          $ref: "#/components/schemas/VoteId"
        voter_id:
          $ref: "#/components/schemas/VoterId"
        tx_hash:
          $ref: "#/components/schemas/TransactionHash"
        block_height:
          $ref: "#/components/schemas/BlockHeight"
    VoteEnvelopeResponse:
      type: object
      properties:
        envelope:
          type: object
          properties:
            encryption_key_indexes:
              type: array
              items:
                type: integer
              example: [ 1, 2 ]
            meta:
              type: object
              properties:
                height:
                  type: integer
                  format: int32
                  example: 2929397
                nullifier:
                  type: string
                  example: "c3f32730a196d8ba928e775fad430969b500633adf33b3f63922b9d8713317a2"
                process_id:
                  type: string
                  example: "0213b31d622b6475d4f3a32cffdc26b02f3ea7589a72c1ea2b03587b7dc7a576"
                tx_hash:
                  type: string
                  example: "75e8f822f5dd13973ac5158d600f0a2a5fea4bfefce9712ab5195bf17884cfad"
                tx_index:
                  type: integer
                  format: int32
                  example: 0
            nonce:
              type: string
              example: "4b6e87d0b01c82cd269a57658c49ef2c429eaf4d480ca6710ff07af72c7059df"
            signature:
              type: string
              example: "a7b8b2b4e9fb753627145b2f84770169e944f9e3f509c3402b7bb7d9c873a88a061de02aabc73355529f2b422d2a8d64f8ae39f0363d2aef7504142ef04d386c1c"
            vote_package:
              type: string
              example: "Yaiw2PMe8YZ+iTcPvOHAaZVoAiNzz3vdEed0pPXTRwF4unD15N79+7P4Jx5fk55CDBvhQuvpmD9mEprVJehur4I8ovqeaktwNoWUHvT8ue090r2J4yL33YqvZGlcpoa5lnGUMcRPra8bnBhqd1HX6KTTzhXV74fNijncNbj57/sdTr04ljolaA=="
            weight:
              type: string
              example: "1"
    CensusTypeWalletRequest:
      description: "Used on wallet operations"
      type: object
      properties:
        type:
          $ref: "#/components/schemas/CensusType"
        url:
          $ref: "#/components/schemas/AnyUri"
    WalletElectionRequest:
      type: object
      properties:
        title:
          type: string
          example: "Election title"
        description:
          type: string
          example: "Ut voluptatum facere velit corrupti. Temporibus quaerat dolorem non quia assumenda quis magni. Consequatur nobis ut omnis eveniet dolorem accusamus et."
        header:
          $ref: "#/components/schemas/HttpsUri"
        streamURI:
          $ref: "#/components/schemas/HttpsUri"
        startDate:
          $ref: "#/components/schemas/TimeStamp"
        endDate:
          $ref: "#/components/schemas/TimeStamp"
        voteType:
          $ref: "#/components/schemas/VoteType"
        electionType:
          $ref: "#/components/schemas/ElectionType"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
        census:
          $ref: "#/components/schemas/CensusTypeWalletRequest"
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer